<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>浅谈Jetpack Compose LaunchedEffect</title>
    <url>/2023/07/04/A-brief-of-Jetpack-Compose-LaunchedEffect/</url>
    <content><![CDATA[<p>在Jetpack Compose 代码中，我们经常看到<code>LaunchedEffect</code>这个常见的。今天就简单了解下这个方法吧。在说<code>LaunchedEffect</code>前，让我们先说一下<code>Side Effect</code>.</p>
<h3 id="什么是Side-Effect"><a href="#什么是Side-Effect" class="headerlink" title="什么是Side Effect"></a>什么是Side Effect</h3><p>在编程语言中，<code>Side-Effect</code>指的是调用函数时，除了返回可能的函数值外，该函数还对函数范围外的变量，参数等进行了修改。<br>举个🌰，看下面的函数，它有2个参数，返回它们的和，但是没有对任何其他变量有修改，所以它是没有副作用(No Side-Effect)的</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(number1: <span class="type">Int</span>, number2: <span class="type">Int</span>)</span></span> = number1 + number2</span><br></pre></td></tr></table></figure>
<p>但如果我们将函数修改成下面的实现，每次调用该函数都会对sum重新赋值，而sum又是在函数范围外，所以认为这个函数有一个副作用</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(number1: <span class="type">Int</span>, number2: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    sum = number1 + number2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在Jetpack-Compose-中，什么是LaunchedEffect"><a href="#在Jetpack-Compose-中，什么是LaunchedEffect" class="headerlink" title="在Jetpack Compose 中，什么是LaunchedEffect"></a>在Jetpack Compose 中，什么是LaunchedEffect</h3><p>根据源码我们看到，<code>LaunchedEffect</code>是一个带有<code>@Composable</code>的函数，注释如下</p>
<span id="more"></span>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">When LaunchedEffect enters the composition it will launch block into the composition<span class="string">&#x27;s CoroutineContext. The coroutine will be cancelled and re-launched when LaunchedEffect is recomposed with a different key1 or key2. The coroutine will be cancelled when the LaunchedEffect leaves the composition.</span></span><br><span class="line"><span class="string">This function should not be used to (re-)launch ongoing tasks in response to callback events by way of storing callback data in MutableState passed to key. Instead, see rememberCoroutineScope to obtain a CoroutineScope that may be used to launch ongoing jobs scoped to the composition in response to event callbacks.</span></span><br></pre></td></tr></table></figure>
<p>简单来说，<code>LaunchedEffect</code>是一个可在当前可组合项的作用域内运行挂起函数(block是suspend的)的可组合函数。<br>在<a href="https://developer.android.com/jetpack/compose/mental-model">Thinking in Compose</a>中，我们了解到一个可组合项应该是没有副作用的，如果我们想要在可组合项中修改应用状态，需要通过Effect API启动协程操作，所以可以说<code>LaunchedEffect</code>在Jetpack Compose中提供了在可组合项中调用挂起函数的能力。</p>
<p>下面我们通过一个例子简单了解下， 这个例子是一个TodoTask下的一个小功能，根据选择的类别展示当前类别的所有Task。<br>简单的准备mock tasks，代码如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoTask</span></span>(</span><br><span class="line">    <span class="keyword">val</span> id: <span class="built_in">Long</span>,</span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="keyword">val</span> description: String</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// mock tasks respose</span></span><br><span class="line"><span class="keyword">val</span> mockTasks = (<span class="number">1.</span><span class="number">.10</span>).map &#123;</span><br><span class="line">    TodoTask(</span><br><span class="line">        id = it.toLong(),</span><br><span class="line">        name = <span class="string">&quot;task name <span class="variable">$it</span>&quot;</span>,</span><br><span class="line">        description = <span class="string">&quot;task description <span class="variable">$it</span>&quot;</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// mock get tasks from api, delay 2 seconds</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getTasks</span><span class="params">()</span></span>: List&lt;TodoTask&gt; &#123;</span><br><span class="line">    delay(<span class="number">2000</span>)</span><br><span class="line">    <span class="keyword">return</span> mockTasks</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在TodoListOfCategoryScreen主要是一个Lazy Column用来展示任务名称的，其中参数是Category</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">TodoListOfCategoryScreen</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    category: <span class="type">String</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;TASK TAG: out of column scope&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> tasks <span class="keyword">by</span> remember &#123;</span><br><span class="line">        mutableStateOf(emptyList&lt;TodoTask&gt;())</span><br><span class="line">    &#125;</span><br><span class="line">    Column(</span><br><span class="line">        modifier = Modifier.fillMaxSize()</span><br><span class="line">    ) &#123;</span><br><span class="line">        println(<span class="string">&quot;TASK TAG: TodoListScreen: <span class="subst">$&#123;tasks.size&#125;</span>, category: <span class="variable">$category</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        LaunchedEffect(key1 = category) &#123;</span><br><span class="line">            tasks = getTasks()</span><br><span class="line">            println(<span class="string">&quot;TASK TAG: get tasks from api, category: <span class="variable">$category</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        LazyColumn(</span><br><span class="line">            modifier = Modifier.fillMaxSize()</span><br><span class="line">        ) &#123;</span><br><span class="line">            items(tasks, key = &#123;</span><br><span class="line">                it.id</span><br><span class="line">            &#125;) &#123;</span><br><span class="line">                Text(modifier = Modifier.fillMaxWidth(), text = it.name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先我们的category是固定的，在getTasks之后，修改了tasks导致Column发生重组，所以scope相关的日志打印了2次。而模拟网络请求的<code>LaunchedEffect</code>内只调用了一次，是因为<code>LaunchedEffect</code>的调用时期只有进入重组项或者Key变化重组，如果是普通的启动协程，在重组时，会导致多次调用api请求。<br><img src="/images/codes/launched_effect_1.jpg" alt="Logcat" title="launched_effect"></p>
<blockquote>
<p>PS: 这里为什么out of column scope也会打印2次呢，其实是因为Column是inline的， 它只能共享调用方的重组范围。</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><code>LaunchedEffect</code>是在Jetpack Compose中提供了在可组合项中调用挂起函数的能力的一种方式。</li>
<li>在进入组合项时，<code>LaunchedEffect</code>会启动一个协程并执行挂起代码块(block)，在退出组合项时，协程将取消</li>
<li>使用不同的key(参数key1, key2)重组时，会取消当前协程并启动新的协程执行挂起函数</li>
<li>写<code>LaunchedEffect</code>函数时，最少要一个key(IDE 会有提示)</li>
<li><code>LaunchedEffect</code>的函数调度器是主线程</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Jetpack Compose</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>DATA BETWEEN AIDL IN ANDROID</title>
    <url>/2023/03/20/DATA-BETWEEN-AIDL-IN-ANDROID/</url>
    <content><![CDATA[<blockquote>
<p>Android 夸进程通讯的方式一般有：</p>
<ol>
<li>Binder</li>
<li>内存共享</li>
<li>Socket</li>
</ol>
</blockquote>
<p>其中Binder在Android中使用比较多，比如AMS<br>在Android上，一个进程通常是不能获取到其他进程的内存访问权限的，但是有时我们需要在多个进程之间进行数据处理，因此Android提供了Android Interface Definition Language（AIDL）来做处理<br>其实AIDL是文件会通过编译生成一个Sub类并实现IBinder接口的，这种方式可以说是基于Binder实现的。</p>
<h3 id="配置新项目"><a href="#配置新项目" class="headerlink" title="配置新项目"></a>配置新项目</h3><p>首先创建一个项目，有两个Phone Module，分别为Client和Server端。对于新的项目打开aidl feature支持</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">buildFeatures &#123;</span><br><span class="line">    compose <span class="literal">true</span></span><br><span class="line">    aidl <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="Server端："><a href="#Server端：" class="headerlink" title="Server端："></a>Server端：</h3><p>然后创建aidl文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface IRemoteAidlInterface &#123;</span><br><span class="line">    /**</span><br><span class="line">    * Demonstrates some basic types that you can use as parameters</span><br><span class="line">    * and return values in AIDL.</span><br><span class="line">    */</span><br><span class="line">    int currPid();</span><br><span class="line">    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,</span><br><span class="line">    double aDouble, String aString);</span><br><span class="line">    void addUser(inout User user);</span><br><span class="line">    User theFirstUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上加了User不是基本类型，所以需要做一些特殊处理，<br>首先添加一个aidl文件声明下这个类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.easy.aidlserver;</span><br><span class="line"></span><br><span class="line">// Declare any non-default types here with import statements</span><br><span class="line"></span><br><span class="line">parcelable User;</span><br></pre></td></tr></table></figure>
<p>然后创建一个data class, 并添加<code>readFromParcel</code>方法</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Parcelize</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(</span><br><span class="line"><span class="keyword">var</span> name: String? = <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">): Parcelable &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">readFromParcel</span><span class="params">(reply: <span class="type">Parcel</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = reply.readString().toString()</span><br><span class="line">        <span class="keyword">this</span>.age = reply.readInt()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Build下项目生成对应的java类，<br>声明并注册一个Service，提供数据处理能力</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoteService</span> : <span class="type">Service</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBind</span><span class="params">(intent: <span class="type">Intent</span>?)</span></span>: IBinder &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;Service Side&quot;</span>, <span class="string">&quot;onBind&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> binder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onUnbind</span><span class="params">(intent: <span class="type">Intent</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;Service Side&quot;</span>, <span class="string">&quot;onUnBind&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onUnbind(intent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> users = mutableListOf&lt;User&gt;()</span><br><span class="line"></span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并在manifest种注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.RemoteService&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:ignore</span>=<span class="string">&quot;ExportedService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.aidl.server&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里Server端代码完成了</p>
<h3 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h3><p>copy aidl文件到client端，注意要相同的包名和内容，还有对应的data class <code>User</code><br>定义connection并通过Binder拿到AIDL Interface，拿到interface就可以通过调用aidl提供的方法，并通过Proxy和服务端的service进行数据传输和处理</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> sConnection = <span class="keyword">object</span> : ServiceConnection &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onServiceConnected</span><span class="params">(name: <span class="type">ComponentName</span>?, service: <span class="type">IBinder</span>?)</span></span> &#123;</span><br><span class="line">        iRemoteService = IRemoteAidlInterface.Stub.asInterface(service)</span><br><span class="line">        iRemoteService?.let &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">val</span> pid = it.currPid()</span><br><span class="line">                <span class="keyword">val</span> myPid = Process.myPid()</span><br><span class="line">                Log.i(<span class="string">&quot;Client&quot;</span>, <span class="string">&quot;Service Pid: <span class="variable">$pid</span>, Client Pid: <span class="variable">$myPid</span>&quot;</span>)</span><br><span class="line">                it.basicTypes(<span class="number">1</span>, <span class="number">2</span>, <span class="literal">true</span>, <span class="number">3.0f</span>, <span class="number">5.0</span>, <span class="string">&quot;Hello AIDL Server&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">                e.printStackTrace()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onServiceDisconnected</span><span class="params">(name: <span class="type">ComponentName</span>?)</span></span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;Client&quot;</span>, <span class="string">&quot;onDisconnect&quot;</span>)</span><br><span class="line">        iRemoteService = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遇到的问题或疑惑：</p>
<ol>
<li><p>通过API30 的x86 虚拟机可以正常唤醒service并数据正常传输，但是在API33的真机上无法bind service<br>通过查阅资料，发现在30或以上的API level后存在<a href="https://developer.android.google.cn/training/package-visibility?hl=en">Package visibility filtering on Android</a> 这么一个说法。<br>大概就是为了更高的安全性而加入了过滤行为，从而导致应用无法检测到当前设备上所有安装的应用程序。解决方法加入 <code>queries</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">queries</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">android:name</span>=<span class="string">&quot;com.easy.aidlserver&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">queries</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>已经操作了unbindService，但是仍然能进行数据操作，而且日志走了onUnbind却不走onServiceDisconnected<br>其实onServiceDisconnected在正常unbind的时候是不会触发执行的，而是在服务丢失的时候执行。<br><img src="/images/codes/aidl_1.jpg" alt="When to excute onServiceDisconnected" title="AIDL"></p>
</li>
<li><p>传输大数据的时候<br>因为AIDL 是通过IBinder进行数据传输的，而IBinder对数据的拷贝是经过mmap（内存映射），在我们app启动的时候，会去申请一个 1M - 8K大小的内存给mmap，所以如果<br>传输1M或以上的数据就会报错。<br>将User修改一下，加一个ByteArray</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Parcelize</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(</span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="keyword">var</span> byteArray: ByteArray = ByteArray(<span class="number">1</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>使用的时候</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// _1M = 1024 * 1024</span></span><br><span class="line">iRemoteService?.addUser(</span><br><span class="line">    User(</span><br><span class="line">        <span class="string">&quot;Dougie <span class="subst">$&#123;Random.nextInt(<span class="number">1</span>, <span class="number">100</span>)&#125;</span>&quot;</span>,</span><br><span class="line">        Random.nextInt(<span class="number">18</span>, <span class="number">24</span>),</span><br><span class="line">        byteArray = ByteArray(_1M)</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>你会收到报错信息：<br><img src="/images/codes/aidl_error.jpg" alt="android.os.TransactionTooLargeException: data parcel size 1048712 bytes" title="AIDL Error"></p>
</li>
</ol>
<h3 id="代码地址-AidlSample"><a href="#代码地址-AidlSample" class="headerlink" title="代码地址 AidlSample"></a>代码地址 <a href="https://github.com/BreakZero/AidlSample">AidlSample</a></h3>]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Kotlin Coroutines + Retrofit + MVVM 简单实现</title>
    <url>/2021/09/11/Android-Kotlin-Coroutines-Retrofit-MVVM-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>这是一篇随记，想尝试下写文章。</li>
<li>这里基本不会深入讨论各个知识点，如需了解更多可以参考 <a href="https://www.bennyhuo.com/">Benny’s Blog</a> 和 <a href="https://kotlinlang.org/docs/reference/coroutines/coroutines-guide.html">Kotlin官方文档</a><h2 id="为什么使用协程"><a href="#为什么使用协程" class="headerlink" title="为什么使用协程"></a>为什么使用协程</h2></li>
<li>协程比线程小<blockquote>
<p>我： 为什么已经有Rx了还要在这里用协程？<br><br>某同事： 因为协程比线程小，可以开很多个。<br><br>我：…… 为什么比线程小？</p>
</blockquote>
</li>
</ul>
<p>&emsp; 我维基了一下，确实有说比线程更小。<br><br>&emsp; 但是看了一些源码，也是线程池 + 线程实现的，这时就开始有了疑惑，为什么同样是线程，怎么就说是比线程小的东西呢？<br><br>&emsp; 直到看到了Benny大佬的文章 <a href="https://www.bennyhuo.com/2019/10/19/coroutine-why-so-called-lightweight-thread/">协程为什么被称为『轻量级线程』</a>解释，我清晰了。通过测验，确实启动成千上万个协程也不会出现OOM或者其他问题。</p>
<ul>
<li>当然最主要的还是代码上的体验<br>现在Kotlin越来越普遍，各种inline函数，操作符也都基本可以替换Rx的常用操作符了。所以在写代码上体验还是相对比较好的。<br><br><font color=#f00 size=3><em>（备注：个人觉得协程小不小对于Android开发真的没多大区别，最主要还是写代码和代码美观性）</em></font><span id="more"></span>
<h2 id="一、添加依赖"><a href="#一、添加依赖" class="headerlink" title="一、添加依赖"></a>一、添加依赖</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation<span class="string">&quot;com.squareup.retrofit2:retrofit:2.6.2&quot;</span></span><br><span class="line">implementation<span class="string">&quot;com.squareup.retrofit2:converter-gson:2.6.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Coroutines </span></span><br><span class="line">implementation <span class="string">&#x27;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.2&#x27;</span></span><br></pre></td></tr></table></figure>
<font color=#f00 size=3><em>记得使用retrofit 2.6.0 或以上</em></font><h2 id="二、准备网络请求接口"><a href="#二、准备网络请求接口" class="headerlink" title="二、准备网络请求接口"></a>二、准备网络请求接口</h2></li>
<li>创建接口<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GitApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GET(<span class="meta-string">&quot;/users/&#123;username&#125;/&#123;module&#125;&quot;</span>)</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">repos</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Path(<span class="meta-string">&quot;username&quot;</span>)</span> username: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Path(<span class="meta-string">&quot;module&quot;</span>)</span> module: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Query(<span class="meta-string">&quot;page&quot;</span>)</span> currPage: <span class="type">Int</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: List&lt;RepoInfo&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET(<span class="meta-string">&quot;/search/repositories&quot;</span>)</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">searchRepos</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Query(<span class="meta-string">&quot;q&quot;</span>)</span> key: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Query(<span class="meta-string">&quot;sort&quot;</span>)</span> sort: <span class="type">String</span>? = <span class="string">&quot;updated&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Query(<span class="meta-string">&quot;order&quot;</span>)</span> order: <span class="type">String</span>? = <span class="string">&quot;desc&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Query(<span class="meta-string">&quot;page&quot;</span>)</span> currPage: <span class="type">Int</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: SearchResponse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建Retrofit实例<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">buildRetrofit</span><span class="params">()</span></span>: Retrofit &#123;</span><br><span class="line">     builder.addInterceptor(HttpLoggingInterceptor(<span class="keyword">object</span> : HttpLoggingInterceptor.Logger &#123;</span><br><span class="line">         <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">log</span><span class="params">(message: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">             Timber.d(message)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;).apply &#123;</span><br><span class="line">         level = HttpLoggingInterceptor.Level.BODY</span><br><span class="line">     &#125;).addInterceptor(<span class="keyword">object</span> : Interceptor &#123;</span><br><span class="line">         <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">intercept</span><span class="params">(chain: <span class="type">Interceptor</span>.<span class="type">Chain</span>)</span></span>: Response &#123;</span><br><span class="line">             <span class="keyword">val</span> userCredentials = <span class="string">&quot;<span class="variable">$username</span>:<span class="variable">$password</span>&quot;</span></span><br><span class="line">             <span class="keyword">val</span> basicAuth =</span><br><span class="line">                 <span class="string">&quot;Basic <span class="subst">$&#123;String(Base64.encode(userCredentials.toByteArray(), Base64.DEFAULT))&#125;</span>&quot;</span></span><br><span class="line">             <span class="keyword">val</span> original = chain.request()</span><br><span class="line">             <span class="keyword">val</span> requestBuilder = original.newBuilder()</span><br><span class="line">                 .header(<span class="string">&quot;Authorization&quot;</span>, basicAuth.trim &#123; it &lt;= <span class="string">&#x27; &#x27;</span> &#125;)</span><br><span class="line">             <span class="keyword">val</span> request = requestBuilder.build()</span><br><span class="line">             <span class="keyword">return</span> chain.proceed(request)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="keyword">return</span> Retrofit.Builder()</span><br><span class="line">         .client(builder.build())</span><br><span class="line">         .baseUrl(BASE_URL)</span><br><span class="line">         .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">         .build()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、-在ViewModel中使用"><a href="#三、-在ViewModel中使用" class="headerlink" title="三、 在ViewModel中使用"></a>三、 在ViewModel中使用</h2><code>kotlinx.coroutines.CoroutineScope</code> 接口中的注释有这么一句话<br><br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/30/16f561eaea6d630b~tplv-t2oaga2asx-image.image" alt="image.png"><br>所以启动一个协程一定需要一个<code>Scope</code>，也就是说每个suspend函数都有一个<code>CoroutineScope</code>，如果没有一定会报错。而Android的ViewModel中有扩展了一个<code>viewModelScope</code>，并且跟<code>lifecycle</code>绑定了，所以在ViewModel的onCleared方法上会自动帮我们cancel掉这个viewModelScope的所有Jobs。<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/30/16f561eae8114f24~tplv-t2oaga2asx-image.image" alt="图1"><br>为了方便使用，封装了一个BaseViewModel<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseViewModel</span> : <span class="type">ViewModel</span></span>() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">request</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        onError: (<span class="type">error</span>: <span class="type">Throwable</span>) -&gt; <span class="type">Unit</span> = &#123;&#125;, <span class="comment">// 不需要处理Error可以不传</span></span></span></span><br><span class="line"><span class="params"><span class="function">        execute: <span class="type">suspend</span> <span class="type">CoroutineScope</span>.() -&gt; <span class="type">T</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span> &#123;</span><br><span class="line">        viewModelScope.launch(errorHandler &#123; onError.invoke(it) &#125;) &#123;</span><br><span class="line">            launch(Dispatchers.IO) &#123;</span><br><span class="line">                execute()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">errorHandler</span><span class="params">(onError: (<span class="type">error</span>: <span class="type">Throwable</span>) -&gt; <span class="type">Unit</span>)</span></span>: CoroutineExceptionHandler &#123;</span><br><span class="line">        <span class="keyword">return</span> CoroutineExceptionHandler &#123; _, throwable -&gt;</span><br><span class="line">            Timber.d(throwable)</span><br><span class="line">            onError.invoke(throwable)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
使用继承 <code>BaseViewModel</code> 调用 <code>request</code> 方法即可。<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RepoViewModel</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> userRepo: UserDataSource,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> gitApi: GitApi</span><br><span class="line">) : BaseViewModel() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> _reposResult = BaseLiveData&lt;List&lt;RepoInfo&gt;&gt;()</span><br><span class="line">    <span class="keyword">val</span> repoResult: BaseLiveData&lt;List&lt;RepoInfo&gt;&gt;</span><br><span class="line">        <span class="keyword">get</span>() = _reposResult</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">fetchRepos</span><span class="params">(module: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        request &#123;</span><br><span class="line">            userRepo.currUser()?.let &#123;</span><br><span class="line">                <span class="keyword">val</span> result = gitApi.repos(it.nickname, module, <span class="number">1</span>)</span><br><span class="line">                _reposResult.update(result)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
OR<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fetchRepos</span><span class="params">(module: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        request(</span><br><span class="line">            onError = &#123;</span><br><span class="line">                <span class="comment">// handle error</span></span><br><span class="line">            &#125;,</span><br><span class="line">            execute = &#123;</span><br><span class="line">                userRepo.currUser()?.let &#123;</span><br><span class="line">                    <span class="keyword">val</span> result = gitApi.repos(it.nickname, module, <span class="number">1</span>)</span><br><span class="line">                    _reposResult.update(result)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
剩下的基本是LiveData和Fragment之间的订阅上的逻辑实现了。<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2>最近在学习，了解也不是很深，欢迎评论补充和提建议。 学习项目地址 <a href="https://github.com/BreakZero/Dithub">Dithub</a>。</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>MVVM</tag>
      </tags>
  </entry>
  <entry>
    <title>RPC with Kotlinx Serialization</title>
    <url>/2022/06/08/RPC-with-Kotlinx-Serialization/</url>
    <content><![CDATA[<blockquote>
<p>因为将项目从Retrofit切换到Ktor和gson切换到kotlinx serialize。而kotlinx serialize和gson的实现差异导致在rpc接口中对于rpc 请求参数类型不一致的情况下，序列化出现了异常报错，比如类似一下的请求Body</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_call&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;data&quot;</span>: <span class="string">&quot;0x5ec88c7900000000000000000000000081080a7e991bcdddba8c2302a70f45d6bd369ab5&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;0x81080a7e991bcDdDBA8C2302A70f45d6Bd369Ab5&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;0xb3831584acb95ED9cCb0C11f677B5AD01DeaeEc0&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;latest&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="List-lt-Any-gt-Contextual"><a href="#List-lt-Any-gt-Contextual" class="headerlink" title="List&lt;Any&gt; + @Contextual"></a><code>List&lt;Any&gt;</code> + @Contextual</h3><p>本来以为在Kotlinx Serialize上会像Gson一样轻松解决，一开始便对于原来的数据结构定义成</p>
<span id="more"></span>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Serializable</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBaseRpc</span></span>(</span><br><span class="line">    <span class="keyword">val</span> jsonrpc: String,</span><br><span class="line">    <span class="keyword">val</span> method: String,</span><br><span class="line">    <span class="keyword">val</span> params: List&lt;<span class="meta">@Contextual</span> Any&gt;,</span><br><span class="line">    <span class="keyword">val</span> id: <span class="built_in">Int</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>并在Json 配置的时候将 Contextual配置上</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Json &#123;</span><br><span class="line">    useArrayPolymorphism = <span class="literal">true</span></span><br><span class="line">    prettyPrint = <span class="literal">true</span></span><br><span class="line">    allowStructuredMapKeys = <span class="literal">true</span></span><br><span class="line">    serializersModule = SerializersModule &#123;</span><br><span class="line">        contextual(Any::<span class="class"><span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            TestCaller.serializer()</span><br><span class="line">            String.serializer()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将单元测试代码跑起来后发现，contextual 只使用了最后一个serializer来解析Any类型，所以这个方向无法实现想要的结果<br>报错如下：<p style="color:red">***.TestCaller cannot be cast to class java.lang.String</p></p>
<blockquote>
<p>Note: 如果将两个serializer调换顺序就会发现报错也会两个类型互换</p>
</blockquote>
<h3 id="通过-Interface-Polymorphic"><a href="#通过-Interface-Polymorphic" class="headerlink" title="通过 Interface + Polymorphic"></a>通过 Interface + Polymorphic</h3><p>polymorphic多态的意思，顾名思义，可以根据实际情况进行选择对应的Serializer，所以需要有一个基类(可以interface，sealed…)</p>
<ol>
<li>首先定义一个interface<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">interface</span> <span class="title">Parameter</span></span></span><br></pre></td></tr></table></figure></li>
<li>定义subclass<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Serializable</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">CallParameter</span></span>(</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span>: String,</span><br><span class="line">    <span class="keyword">val</span> from: String,</span><br><span class="line">    <span class="keyword">val</span> to: String</span><br><span class="line">) : Parameter</span><br><span class="line"></span><br><span class="line"><span class="meta">@Serializable</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">IntListParameter</span></span>(</span><br><span class="line">    <span class="keyword">val</span> items: List&lt;<span class="built_in">Int</span>&gt;</span><br><span class="line">) : Parameter</span><br><span class="line"></span><br><span class="line"><span class="meta">@Serializable</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">StringParameter</span></span>(</span><br><span class="line">    <span class="keyword">val</span> content: String</span><br><span class="line">) : Parameter</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li>配置Json模块<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Json &#123;</span><br><span class="line">    useArrayPolymorphism = <span class="literal">true</span></span><br><span class="line">    prettyPrint = <span class="literal">true</span></span><br><span class="line">    ignoreUnknownKeys = <span class="literal">true</span></span><br><span class="line">    allowStructuredMapKeys = <span class="literal">true</span></span><br><span class="line">    serializersModule = SerializersModule &#123;</span><br><span class="line">        polymorphic(List::<span class="class"><span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            ListSerializer(ParameterSerialize)</span><br><span class="line">        &#125;</span><br><span class="line">        polymorphic(Parameter::<span class="class"><span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            subclass(CallParameter::<span class="class"><span class="keyword">class</span>, <span class="type">CallParameter.serializer</span></span>())</span><br><span class="line">            subclass(StringParameter::<span class="class"><span class="keyword">class</span>, <span class="type">StringParameterSerializer)</span></span></span><br><span class="line">            subclass(IntListParameter::<span class="class"><span class="keyword">class</span>, <span class="type">IntListParameterSerializer)</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>针对不同结构定义不同的Serializer<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> IntListParameterSerializer : KSerializer&lt;IntListParameter&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">deserialize</span><span class="params">(decoder: <span class="type">Decoder</span>)</span></span>: IntListParameter &#123;</span><br><span class="line">        <span class="keyword">return</span> decoder.decodeStructure(descriptor) &#123;</span><br><span class="line">            <span class="keyword">val</span> items = decodeSerializableElement(descriptor, <span class="number">0</span>, ListSerializer(<span class="built_in">Int</span>.serializer()))</span><br><span class="line">            IntListParameter(</span><br><span class="line">                items = items</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> descriptor: SerialDescriptor</span><br><span class="line">        <span class="keyword">get</span>() = buildClassSerialDescriptor(<span class="string">&quot;IntListParameter&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.element&lt;List&lt;<span class="built_in">Int</span>&gt;&gt;(<span class="string">&quot;items&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">serialize</span><span class="params">(encoder: <span class="type">Encoder</span>, value: <span class="type">IntListParameter</span>)</span></span> &#123;</span><br><span class="line">        encoder.encodeSerializableValue(ListSerializer(<span class="built_in">Int</span>.serializer()), value.items)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OptIn(ExperimentalSerializationApi::class)</span></span><br><span class="line"><span class="meta">@Serializer(forClass = BaseRpcRequest::class)</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> RpcRequestBodySerializer : KSerializer&lt;BaseRpcRequest&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">deserialize</span><span class="params">(decoder: <span class="type">Decoder</span>)</span></span>: BaseRpcRequest &#123;</span><br><span class="line">        <span class="keyword">return</span> decoder.decodeStructure(descriptor) &#123;</span><br><span class="line">            <span class="keyword">var</span> rpc: String? = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">var</span> method: String? = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">var</span> params: List&lt;Parameter&gt; = emptyList()</span><br><span class="line">            <span class="keyword">var</span> id: <span class="built_in">Int</span>? = <span class="literal">null</span></span><br><span class="line">            <span class="symbol">loop@</span> <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">when</span> (decodeElementIndex(descriptor)) &#123;</span><br><span class="line">                    CompositeDecoder.DECODE_DONE -&gt; <span class="keyword">break</span><span class="symbol">@loop</span></span><br><span class="line"></span><br><span class="line">                    <span class="number">0</span> -&gt; rpc = decodeStringElement(descriptor, <span class="number">0</span>)</span><br><span class="line">                    <span class="number">1</span> -&gt; method = decodeStringElement(descriptor, <span class="number">1</span>)</span><br><span class="line">                    <span class="number">2</span> -&gt; params = decodeSerializableElement(descriptor, <span class="number">2</span>, ListSerializer(ParameterSerialize))</span><br><span class="line">                    <span class="number">3</span> -&gt; id = decodeIntElement(descriptor, <span class="number">3</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            BaseRpcRequest(</span><br><span class="line">                jsonrpc = rpc.orEmpty(),</span><br><span class="line">                method = method.orEmpty(),</span><br><span class="line">                params = params,</span><br><span class="line">                id = id ?: <span class="number">1</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> descriptor: SerialDescriptor</span><br><span class="line">        <span class="keyword">get</span>() = buildClassSerialDescriptor(<span class="string">&quot;BaseRpcRequest&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.element&lt;String&gt;(<span class="string">&quot;jsonrpc&quot;</span>)</span><br><span class="line">            <span class="keyword">this</span>.element&lt;String&gt;(<span class="string">&quot;method&quot;</span>)</span><br><span class="line">            <span class="keyword">this</span>.element&lt;List&lt;Parameter&gt;&gt;(<span class="string">&quot;params&quot;</span>)</span><br><span class="line">            <span class="keyword">this</span>.element&lt;<span class="built_in">Int</span>&gt;(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">serialize</span><span class="params">(encoder: <span class="type">Encoder</span>, value: <span class="type">BaseRpcRequest</span>)</span></span> &#123;</span><br><span class="line">        encoder.encodeStructure(descriptor) &#123;</span><br><span class="line">            encodeStringElement(descriptor, <span class="number">0</span>, value.jsonrpc)</span><br><span class="line">            encodeStringElement(descriptor, <span class="number">1</span>, value.method)</span><br><span class="line">            encodeSerializableElement(descriptor, <span class="number">2</span>, ListSerializer(ParameterSerialize), value.params)</span><br><span class="line">            encodeIntElement(descriptor, <span class="number">3</span>, value.id)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li>如果需要deserialize，便需要加上如下选择器<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> ParameterSerialize : JsonContentPolymorphicSerializer&lt;Parameter&gt;(Parameter::<span class="class"><span class="keyword">class</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">selectDeserializer</span><span class="params">(element: <span class="type">JsonElement</span>)</span></span>: DeserializationStrategy&lt;<span class="keyword">out</span> Parameter&gt; &#123;</span><br><span class="line">        println(<span class="string">&quot;element: <span class="variable">$element</span>, obj: <span class="subst">$&#123;element.jsonObject&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// override the condition for your point</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">when</span> &#123;</span><br><span class="line">            <span class="string">&quot;content&quot;</span> <span class="keyword">in</span> element.jsonObject -&gt; StringParameterSerializer</span><br><span class="line">            <span class="string">&quot;items&quot;</span> <span class="keyword">in</span> element.jsonObject -&gt; IntListParameterSerializer</span><br><span class="line">            <span class="keyword">else</span> -&gt; CallParameter.serializer()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
运行单元测试，验证通过：<br><img src="/images/pic1.png" alt="Unit Test Result!" title="Unit Test Result"></li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>只是为了在项目中减少gson的使用，所以花了点时间验证下具体情况，但是：<br>虽然目前看起来是解决了问题，不过相对来说比较麻烦，并且如果类型越来越多也会增加不必要的工作量，所以这里更建议直接使用gson</p>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin Serialization</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyWallet Gradle Clean Up</title>
    <url>/2021/09/11/EasyWallet-Part-1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>记录并整理EasyWallet 小钱包开发过程</li>
<li>在项目中使用到：</li>
</ul>
<ol>
<li>Composing build + plugin 实现依赖库统一管理</li>
<li>Jetpack Compose</li>
<li>Hilt 依赖注入</li>
<li>Kotlin/Kotlin flow/Coroutine</li>
<li>Ktor 实现网络请求</li>
<li>Room 实现本地存储</li>
</ol>
<ul>
<li>本项目地址：<a href="https://github.com/BreakZero/EasyWallet-Mobile-Compose">EasyWallet-Compose</a></li>
</ul>
<h2 id="gradle-脚本管理"><a href="#gradle-脚本管理" class="headerlink" title="gradle 脚本管理"></a>gradle 脚本管理</h2><ul>
<li>创建新的模块作为Composing build，并在 <code>build.gradle.kts</code> 中加入如下代码实现plugin配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gradlePlugin &#123;</span><br><span class="line">    plugins &#123;</span><br><span class="line">        create(&quot;VersionPlugin&quot;) &#123;</span><br><span class="line">            id = &quot;version-plugin&quot; // change the name you like</span><br><span class="line">            implementationClass = &quot;com.easy.version.DependencyVersionPlugin&quot; // change package to what you done</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在 <code>src.main.kotlin</code> 目录下Plugin实现类实现接口 <code>Plugin&lt;Project&gt;</code>，这个plugin 的apply 方法会在任何你使用这个plugin的module 执行  <span id="more"></span></li>
<li>统一管理Configs。 （这里我为了区分feature模块和app模块，所以加了ignore list）<ol>
<li>首先我们在每个模块都需要的plugin，写一个Project的扩展函数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private fun Project.applyPlugin() &#123;</span><br><span class="line">    apply(plugin = &quot;com.android.library&quot;)</span><br><span class="line">    apply(plugin = &quot;kotlin-android&quot;)</span><br><span class="line">    apply(plugin = &quot;kotlin-kapt&quot;)</span><br><span class="line">    apply(plugin = &quot;kotlin-parcelize&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
然后在apply方法中使用<br><code>target.beforeEvaluate &#123; applyPlugin() &#125;</code><br>这里注意要加上beforeEvaluate，在执行前apply plugin</li>
<li>配置 android 块<br>增加扩展方法 <code>LibraryExtension.moduleConfig(isCore: Boolean)</code> (isCore这里算是我项目的特殊支持，为了实现buildConfigField的)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Suppress(&quot;UnstableApiUsage&quot;)</span><br><span class="line">private fun LibraryExtension.moduleConfig(isCore: Boolean) &#123;</span><br><span class="line">    compileSdk = BuildConfig.compileSdkVersion</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdk = BuildConfig.minSdkVersion</span><br><span class="line">        targetSdk = BuildConfig.targetSdkVersion</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility = JavaVersion.VERSION_11</span><br><span class="line">        targetCompatibility = JavaVersion.VERSION_11</span><br><span class="line">    &#125;</span><br><span class="line">    buildFeatures.also &#123;</span><br><span class="line">        it.compose = true</span><br><span class="line">    &#125;</span><br><span class="line">    composeOptions &#123;</span><br><span class="line">        kotlinCompilerExtensionVersion = Compose.version</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>最后在root project中增加  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">subprojects &#123;</span><br><span class="line">    apply(plugin = &quot;version-plugin&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  给每个模块都应用上plugin，当然也可以单独在module上直接应用</li>
<li>以上配置完成后，你会看到模块的 gradle 脚本基本就很少了， 如下  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.easy.version.*</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation(project(&quot;:core&quot;))</span><br><span class="line">    implementation(project(&quot;:core-ui&quot;))</span><br><span class="line"></span><br><span class="line">    implementation(com.easy.version.dependencies.Other.sqlcipher)</span><br><span class="line"></span><br><span class="line">    roomDependencies()</span><br><span class="line">    composeUI()</span><br><span class="line">    hiltDependencies()</span><br><span class="line">    unitTestDependencies()</span><br><span class="line">    androidTestDependencies()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>如此配置之后， 每新增一个子模块，都能统一快速的配置gradle</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>模块分离、Navigation管理…</p>
]]></content>
      <categories>
        <category>Gradle</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Compose的重组作用域</title>
    <url>/2023/07/06/Scoped-recomposition-in-Jetpack-Compose/</url>
    <content><![CDATA[<p>在了解Compose的重组作用域之前，我们先来了解下重组是什么</p>
<h3 id="什么是重组"><a href="#什么是重组" class="headerlink" title="什么是重组"></a>什么是重组</h3><p>对于Jetpack Compose，即使是初学者也都知道它被称为声明式UI开发，相对于之前通过xml方式的命令式UI。而在命令式UI模式下，如果我们想要更新一个widget，我们需要拿到这个widget通过调用其setter函数来改变其内部状态。但是Jetpack Compose中的widget相对无状态并不提供setter/getter函数，而是重新调用可组合函数来实现更新，这个过程就叫重组。目前Jetpack Compose重组是在UI线程执行的，所以重组过程是有性能消耗的。为此，Compose编译器内部做了大量工作保证重组的范围尽可能小来提升重组效率。</p>
<h3 id="重组范围"><a href="#重组范围" class="headerlink" title="重组范围"></a>重组范围</h3><p>重组范围在Compose中是一个很重要的组成部份，通过尽量缩小重组范围来减少Compose在准备每一帧时的工作量。</p>
<ul>
<li>它们是通过重组更新Compose节点的最小单位</li>
<li>它们通过跟踪观察基于快照的状态对象，并在这些状态变化时会无效<span id="more"></span>
对于每个<code>non-inline</code>并且返回<code>Unit</code>的可组合函数， Compose编译器会生成代码将这个函数包装到一个可重组块中，当这个代码块被标记为Invalidated时，Compose Runtime将确保在渲染下一帧之前该代码块被重新执行（重组）。<br>PS: <p style="color:red">是怎样被标记为Invalidated，这块关系到State/Snapshot暂时不展开，反正先记住，不依赖State的代码是不参与重组的。</p></li>
</ul>
<h3 id="为什么要non-inline且没有返回值的函数才可作为可重组块"><a href="#为什么要non-inline且没有返回值的函数才可作为可重组块" class="headerlink" title="为什么要non-inline且没有返回值的函数才可作为可重组块"></a>为什么要non-inline且没有返回值的函数才可作为可重组块</h3><p>inline函数，在编译过程中会直接将函数体拷贝到调用处，所以它只能共享调用者的重组范围<br>对于有返回值的函数，由于返回值的变化会影响调用者，因此无法单独重组，而必须连同调用方一同参与重组，因此它不能作为入口被标记为invalid</p>
<h3 id="表达式和函数调用"><a href="#表达式和函数调用" class="headerlink" title="表达式和函数调用"></a>表达式和函数调用</h3><p>在深入了解最小重组范围前，我们先了解一个关于常规旧函数调用如何工作的基本概念。在Java/Kotlin中，当你将表达式传递给函数时，该表达式会在调用函数中计算。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">println(<span class="string">&quot;hello&quot;</span> + <span class="string">&quot;world&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>它等价于</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> arg = <span class="string">&quot;hello&quot;</span> + <span class="string">&quot;world&quot;</span></span><br><span class="line">println(arg)</span><br></pre></td></tr></table></figure>
<p>简而言之，先执行表达式得到结果，在执行函数调用</p>
<h3 id="确认重组作用域"><a href="#确认重组作用域" class="headerlink" title="确认重组作用域"></a>确认重组作用域</h3><p>大致了解了表达式和函数调用后，我们通过一个简单的例子过一下，先看下面的代码块</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span> <span class="function"><span class="keyword">fun</span> <span class="title">Foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> text <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="string">&quot;&quot;</span>) &#125;</span><br><span class="line">    println(<span class="string">&quot;TAG: Foo Scope&quot;</span>)</span><br><span class="line">    Button(onClick = &#123; text = <span class="string">&quot;<span class="variable">$text</span>\n<span class="variable">$text</span>&quot;</span> &#125;) &#123;</span><br><span class="line">        println(<span class="string">&quot;TAG: Button lambda Scope&quot;</span>)</span><br><span class="line">        Text(text).also &#123;</span><br><span class="line">            println(<span class="string">&quot;TAG: Text Scope&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-为什么text改变后，不是只有Text发生重组"><a href="#1-为什么text改变后，不是只有Text发生重组" class="headerlink" title="1. 为什么text改变后，不是只有Text发生重组"></a>1. 为什么text改变后，不是只有Text发生重组</h4><p>点击Button时，State <code>text</code> 被重新复制而改变，而State <code>text</code>只有Text访问到，为什么重组范围不是只有Text？<br>从上面代码块看，我们知道text其实是一个表达式，而Text则是一个函数，所以text计算结果是在调用Text之前，也就是Button的lambda</p>
<h4 id="2-为什么不是整个Foo发生重组"><a href="#2-为什么不是整个Foo发生重组" class="headerlink" title="2. 为什么不是整个Foo发生重组"></a>2. 为什么不是整个Foo发生重组</h4><p>我们知道当State发生变化时才会发生重组，而Foo中没有访问任何State对象，所以它不会发生重组。让我们修改下代码看看，将<code>by</code>改成<code>=</code>，逻辑就清晰了</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span> <span class="function"><span class="keyword">fun</span> <span class="title">Foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> text: MutableState&lt;String&gt; = remember &#123; mutableStateOf(<span class="string">&quot;&quot;</span>) &#125;</span><br><span class="line">    println(<span class="string">&quot;TAG: Foo Scope&quot;</span>)</span><br><span class="line">    Button(onClick = &#123; text.value = <span class="string">&quot;<span class="subst">$&#123;text.value&#125;</span>\n<span class="subst">$&#123;text.value&#125;</span>&quot;</span> &#125;) &#123;</span><br><span class="line">        println(<span class="string">&quot;TAG: Button lambada Scope&quot;</span>)</span><br><span class="line">        Text(text.value).also &#123;</span><br><span class="line">            println(<span class="string">&quot;TAG: Text Scope&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显而易见，text一直都是同一个MutableState对象，修改的只不过是它内部持有的value，而value在Text中访问</p>
<h4 id="3-为什么不是Button发生重组"><a href="#3-为什么不是Button发生重组" class="headerlink" title="3. 为什么不是Button发生重组"></a>3. 为什么不是Button发生重组</h4><p>因为<code>Foo</code>没发生重组，所以重组时并不会调用Button函数</p>
<h4 id="4-onClick-lambada表达式呢"><a href="#4-onClick-lambada表达式呢" class="headerlink" title="4. onClick lambada表达式呢"></a>4. onClick lambada表达式呢</h4><p>重组范围只能是在可重组函数中，即使handlers，<code>Button</code>的<code>onClick</code>都不是可重组函数。所以这种函数不在重组范围内。</p>
<h3 id="重组中-Inline-的坑"><a href="#重组中-Inline-的坑" class="headerlink" title="重组中 Inline 的坑"></a>重组中 Inline 的坑</h3><p>前面也提到了，inline函数是将代码拷贝，所以共享调用者的重组范围。在Compose中很多常见的widget被修饰成inline函数的，比如<code>Column</code>,<code>Row</code>,<code>Box</code>等。</p>
<p>原文地址：<a href="https://dev.to/zachklipp/scoped-recomposition-jetpack-compose-what-happens-when-state-changes-l78">Scoped recomposition in Jetpack Compose — what happens when state changes?</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Jetpack Compose</tag>
        <tag>Android</tag>
      </tags>
  </entry>
</search>
