<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>浅谈Jetpack Compose LaunchedEffect</title>
    <url>/2023/07/04/A-brief-of-Jetpack-Compose-LaunchedEffect/</url>
    <content><![CDATA[<p>在Jetpack Compose 代码中，我们经常看到<code>LaunchedEffect</code>这个常见的。今天就简单了解下这个方法吧。在说<code>LaunchedEffect</code>前，让我们先说一下<code>Side Effect</code>.</p>
<h3 id="什么是Side-Effect"><a href="#什么是Side-Effect" class="headerlink" title="什么是Side Effect"></a>什么是Side Effect</h3><p>在编程语言中，<code>Side-Effect</code>指的是调用函数时，除了返回可能的函数值外，该函数还对函数范围外的变量，参数等进行了修改。<br>举个🌰，看下面的函数，它有2个参数，返回它们的和，但是没有对任何其他变量有修改，所以它是没有副作用(No Side-Effect)的</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(number1: <span class="type">Int</span>, number2: <span class="type">Int</span>)</span></span> = number1 + number2</span><br></pre></td></tr></table></figure>
<p>但如果我们将函数修改成下面的实现，每次调用该函数都会对sum重新赋值，而sum又是在函数范围外，所以认为这个函数有一个副作用</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(number1: <span class="type">Int</span>, number2: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    sum = number1 + number2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在Jetpack-Compose-中，什么是LaunchedEffect"><a href="#在Jetpack-Compose-中，什么是LaunchedEffect" class="headerlink" title="在Jetpack Compose 中，什么是LaunchedEffect"></a>在Jetpack Compose 中，什么是LaunchedEffect</h3><p>根据源码我们看到，<code>LaunchedEffect</code>是一个带有<code>@Composable</code>的函数，注释如下</p>
<span id="more"></span>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">When LaunchedEffect enters the composition it will launch block into the composition<span class="string">&#x27;s CoroutineContext. The coroutine will be cancelled and re-launched when LaunchedEffect is recomposed with a different key1 or key2. The coroutine will be cancelled when the LaunchedEffect leaves the composition.</span></span><br><span class="line"><span class="string">This function should not be used to (re-)launch ongoing tasks in response to callback events by way of storing callback data in MutableState passed to key. Instead, see rememberCoroutineScope to obtain a CoroutineScope that may be used to launch ongoing jobs scoped to the composition in response to event callbacks.</span></span><br></pre></td></tr></table></figure>
<p>简单来说，<code>LaunchedEffect</code>是一个可在当前可组合项的作用域内运行挂起函数(block是suspend的)的可组合函数。<br>在<a href="https://developer.android.com/jetpack/compose/mental-model">Thinking in Compose</a>中，我们了解到一个可组合项应该是没有副作用的，如果我们想要在可组合项中修改应用状态，需要通过Effect API启动协程操作，所以可以说<code>LaunchedEffect</code>在Jetpack Compose中提供了在可组合项中调用挂起函数的能力。</p>
<p>下面我们通过一个例子简单了解下， 这个例子是一个TodoTask下的一个小功能，根据选择的类别展示当前类别的所有Task。<br>简单的准备mock tasks，代码如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoTask</span></span>(</span><br><span class="line">    <span class="keyword">val</span> id: <span class="built_in">Long</span>,</span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="keyword">val</span> description: String</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// mock tasks respose</span></span><br><span class="line"><span class="keyword">val</span> mockTasks = (<span class="number">1.</span><span class="number">.10</span>).map &#123;</span><br><span class="line">    TodoTask(</span><br><span class="line">        id = it.toLong(),</span><br><span class="line">        name = <span class="string">&quot;task name <span class="variable">$it</span>&quot;</span>,</span><br><span class="line">        description = <span class="string">&quot;task description <span class="variable">$it</span>&quot;</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// mock get tasks from api, delay 2 seconds</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getTasks</span><span class="params">()</span></span>: List&lt;TodoTask&gt; &#123;</span><br><span class="line">    delay(<span class="number">2000</span>)</span><br><span class="line">    <span class="keyword">return</span> mockTasks</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在TodoListOfCategoryScreen主要是一个Lazy Column用来展示任务名称的，其中参数是Category</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">TodoListOfCategoryScreen</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    category: <span class="type">String</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;TASK TAG: out of column scope&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> tasks <span class="keyword">by</span> remember &#123;</span><br><span class="line">        mutableStateOf(emptyList&lt;TodoTask&gt;())</span><br><span class="line">    &#125;</span><br><span class="line">    Column(</span><br><span class="line">        modifier = Modifier.fillMaxSize()</span><br><span class="line">    ) &#123;</span><br><span class="line">        println(<span class="string">&quot;TASK TAG: TodoListScreen: <span class="subst">$&#123;tasks.size&#125;</span>, category: <span class="variable">$category</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        LaunchedEffect(key1 = category) &#123;</span><br><span class="line">            tasks = getTasks()</span><br><span class="line">            println(<span class="string">&quot;TASK TAG: get tasks from api, category: <span class="variable">$category</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        LazyColumn(</span><br><span class="line">            modifier = Modifier.fillMaxSize()</span><br><span class="line">        ) &#123;</span><br><span class="line">            items(tasks, key = &#123;</span><br><span class="line">                it.id</span><br><span class="line">            &#125;) &#123;</span><br><span class="line">                Text(modifier = Modifier.fillMaxWidth(), text = it.name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先我们的category是固定的，在getTasks之后，修改了tasks导致Column发生重组，所以scope相关的日志打印了2次。而模拟网络请求的<code>LaunchedEffect</code>内只调用了一次，是因为<code>LaunchedEffect</code>的调用时期只有进入重组项或者Key变化重组，如果是普通的启动协程，在重组时，会导致多次调用api请求。<br><img src="/images/codes/launched_effect_1.jpg" alt="Logcat" title="launched_effect"></p>
<blockquote>
<p>PS: 这里为什么out of column scope也会打印2次呢，其实是因为Column是inline的， 它只能共享调用方的重组范围。</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><code>LaunchedEffect</code>是在Jetpack Compose中提供了在可组合项中调用挂起函数的能力的一种方式。</li>
<li>在进入组合项时，<code>LaunchedEffect</code>会启动一个协程并执行挂起代码块(block)，在退出组合项时，协程将取消</li>
<li>使用不同的key(参数key1, key2)重组时，会取消当前协程并启动新的协程执行挂起函数</li>
<li>写<code>LaunchedEffect</code>函数时，最少要一个key(IDE 会有提示)</li>
<li><code>LaunchedEffect</code>的函数调度器是主线程</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Jetpack Compose</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>DATA BETWEEN AIDL IN ANDROID</title>
    <url>/2023/03/20/DATA-BETWEEN-AIDL-IN-ANDROID/</url>
    <content><![CDATA[<blockquote>
<p>Android 夸进程通讯的方式一般有：</p>
<ol>
<li>Binder</li>
<li>内存共享</li>
<li>Socket</li>
</ol>
</blockquote>
<p>其中Binder在Android中使用比较多，比如AMS<br>在Android上，一个进程通常是不能获取到其他进程的内存访问权限的，但是有时我们需要在多个进程之间进行数据处理，因此Android提供了Android Interface Definition Language（AIDL）来做处理<br>其实AIDL是文件会通过编译生成一个Sub类并实现IBinder接口的，这种方式可以说是基于Binder实现的。</p>
<h3 id="配置新项目"><a href="#配置新项目" class="headerlink" title="配置新项目"></a>配置新项目</h3><p>首先创建一个项目，有两个Phone Module，分别为Client和Server端。对于新的项目打开aidl feature支持</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">buildFeatures &#123;</span><br><span class="line">    compose <span class="literal">true</span></span><br><span class="line">    aidl <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="Server端："><a href="#Server端：" class="headerlink" title="Server端："></a>Server端：</h3><p>然后创建aidl文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface IRemoteAidlInterface &#123;</span><br><span class="line">    /**</span><br><span class="line">    * Demonstrates some basic types that you can use as parameters</span><br><span class="line">    * and return values in AIDL.</span><br><span class="line">    */</span><br><span class="line">    int currPid();</span><br><span class="line">    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,</span><br><span class="line">    double aDouble, String aString);</span><br><span class="line">    void addUser(inout User user);</span><br><span class="line">    User theFirstUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上加了User不是基本类型，所以需要做一些特殊处理，<br>首先添加一个aidl文件声明下这个类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.easy.aidlserver;</span><br><span class="line"></span><br><span class="line">// Declare any non-default types here with import statements</span><br><span class="line"></span><br><span class="line">parcelable User;</span><br></pre></td></tr></table></figure>
<p>然后创建一个data class, 并添加<code>readFromParcel</code>方法</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Parcelize</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(</span><br><span class="line"><span class="keyword">var</span> name: String? = <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">): Parcelable &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">readFromParcel</span><span class="params">(reply: <span class="type">Parcel</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = reply.readString().toString()</span><br><span class="line">        <span class="keyword">this</span>.age = reply.readInt()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Build下项目生成对应的java类，<br>声明并注册一个Service，提供数据处理能力</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoteService</span> : <span class="type">Service</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBind</span><span class="params">(intent: <span class="type">Intent</span>?)</span></span>: IBinder &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;Service Side&quot;</span>, <span class="string">&quot;onBind&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> binder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onUnbind</span><span class="params">(intent: <span class="type">Intent</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;Service Side&quot;</span>, <span class="string">&quot;onUnBind&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onUnbind(intent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> users = mutableListOf&lt;User&gt;()</span><br><span class="line"></span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并在manifest种注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.RemoteService&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:ignore</span>=<span class="string">&quot;ExportedService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.aidl.server&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里Server端代码完成了</p>
<h3 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h3><p>copy aidl文件到client端，注意要相同的包名和内容，还有对应的data class <code>User</code><br>定义connection并通过Binder拿到AIDL Interface，拿到interface就可以通过调用aidl提供的方法，并通过Proxy和服务端的service进行数据传输和处理</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> sConnection = <span class="keyword">object</span> : ServiceConnection &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onServiceConnected</span><span class="params">(name: <span class="type">ComponentName</span>?, service: <span class="type">IBinder</span>?)</span></span> &#123;</span><br><span class="line">        iRemoteService = IRemoteAidlInterface.Stub.asInterface(service)</span><br><span class="line">        iRemoteService?.let &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">val</span> pid = it.currPid()</span><br><span class="line">                <span class="keyword">val</span> myPid = Process.myPid()</span><br><span class="line">                Log.i(<span class="string">&quot;Client&quot;</span>, <span class="string">&quot;Service Pid: <span class="variable">$pid</span>, Client Pid: <span class="variable">$myPid</span>&quot;</span>)</span><br><span class="line">                it.basicTypes(<span class="number">1</span>, <span class="number">2</span>, <span class="literal">true</span>, <span class="number">3.0f</span>, <span class="number">5.0</span>, <span class="string">&quot;Hello AIDL Server&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">                e.printStackTrace()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onServiceDisconnected</span><span class="params">(name: <span class="type">ComponentName</span>?)</span></span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;Client&quot;</span>, <span class="string">&quot;onDisconnect&quot;</span>)</span><br><span class="line">        iRemoteService = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遇到的问题或疑惑：</p>
<ol>
<li><p>通过API30 的x86 虚拟机可以正常唤醒service并数据正常传输，但是在API33的真机上无法bind service<br>通过查阅资料，发现在30或以上的API level后存在<a href="https://developer.android.google.cn/training/package-visibility?hl=en">Package visibility filtering on Android</a> 这么一个说法。<br>大概就是为了更高的安全性而加入了过滤行为，从而导致应用无法检测到当前设备上所有安装的应用程序。解决方法加入 <code>queries</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">queries</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">android:name</span>=<span class="string">&quot;com.easy.aidlserver&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">queries</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>已经操作了unbindService，但是仍然能进行数据操作，而且日志走了onUnbind却不走onServiceDisconnected<br>其实onServiceDisconnected在正常unbind的时候是不会触发执行的，而是在服务丢失的时候执行。<br><img src="/images/codes/aidl_1.jpg" alt="When to excute onServiceDisconnected" title="AIDL"></p>
</li>
<li><p>传输大数据的时候<br>因为AIDL 是通过IBinder进行数据传输的，而IBinder对数据的拷贝是经过mmap（内存映射），在我们app启动的时候，会去申请一个 1M - 8K大小的内存给mmap，所以如果<br>传输1M或以上的数据就会报错。<br>将User修改一下，加一个ByteArray</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Parcelize</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(</span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="keyword">var</span> byteArray: ByteArray = ByteArray(<span class="number">1</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>使用的时候</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// _1M = 1024 * 1024</span></span><br><span class="line">iRemoteService?.addUser(</span><br><span class="line">    User(</span><br><span class="line">        <span class="string">&quot;Dougie <span class="subst">$&#123;Random.nextInt(<span class="number">1</span>, <span class="number">100</span>)&#125;</span>&quot;</span>,</span><br><span class="line">        Random.nextInt(<span class="number">18</span>, <span class="number">24</span>),</span><br><span class="line">        byteArray = ByteArray(_1M)</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>你会收到报错信息：<br><img src="/images/codes/aidl_error.jpg" alt="android.os.TransactionTooLargeException: data parcel size 1048712 bytes" title="AIDL Error"></p>
</li>
</ol>
<h3 id="代码地址-AidlSample"><a href="#代码地址-AidlSample" class="headerlink" title="代码地址 AidlSample"></a>代码地址 <a href="https://github.com/BreakZero/AidlSample">AidlSample</a></h3>]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Kotlin Coroutines + Retrofit + MVVM 简单实现</title>
    <url>/2021/09/11/Android-Kotlin-Coroutines-Retrofit-MVVM-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>这是一篇随记，想尝试下写文章。</li>
<li>这里基本不会深入讨论各个知识点，如需了解更多可以参考 <a href="https://www.bennyhuo.com/">Benny’s Blog</a> 和 <a href="https://kotlinlang.org/docs/reference/coroutines/coroutines-guide.html">Kotlin官方文档</a><h2 id="为什么使用协程"><a href="#为什么使用协程" class="headerlink" title="为什么使用协程"></a>为什么使用协程</h2></li>
<li>协程比线程小<blockquote>
<p>我： 为什么已经有Rx了还要在这里用协程？<br><br>某同事： 因为协程比线程小，可以开很多个。<br><br>我：…… 为什么比线程小？</p>
</blockquote>
</li>
</ul>
<p>&emsp; 我维基了一下，确实有说比线程更小。<br><br>&emsp; 但是看了一些源码，也是线程池 + 线程实现的，这时就开始有了疑惑，为什么同样是线程，怎么就说是比线程小的东西呢？<br><br>&emsp; 直到看到了Benny大佬的文章 <a href="https://www.bennyhuo.com/2019/10/19/coroutine-why-so-called-lightweight-thread/">协程为什么被称为『轻量级线程』</a>解释，我清晰了。通过测验，确实启动成千上万个协程也不会出现OOM或者其他问题。</p>
<ul>
<li>当然最主要的还是代码上的体验<br>现在Kotlin越来越普遍，各种inline函数，操作符也都基本可以替换Rx的常用操作符了。所以在写代码上体验还是相对比较好的。<br><br><font color=#f00 size=3><em>（备注：个人觉得协程小不小对于Android开发真的没多大区别，最主要还是写代码和代码美观性）</em></font><span id="more"></span>
<h2 id="一、添加依赖"><a href="#一、添加依赖" class="headerlink" title="一、添加依赖"></a>一、添加依赖</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation<span class="string">&quot;com.squareup.retrofit2:retrofit:2.6.2&quot;</span></span><br><span class="line">implementation<span class="string">&quot;com.squareup.retrofit2:converter-gson:2.6.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Coroutines </span></span><br><span class="line">implementation <span class="string">&#x27;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.2&#x27;</span></span><br></pre></td></tr></table></figure>
<font color=#f00 size=3><em>记得使用retrofit 2.6.0 或以上</em></font><h2 id="二、准备网络请求接口"><a href="#二、准备网络请求接口" class="headerlink" title="二、准备网络请求接口"></a>二、准备网络请求接口</h2></li>
<li>创建接口<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GitApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GET(<span class="meta-string">&quot;/users/&#123;username&#125;/&#123;module&#125;&quot;</span>)</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">repos</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Path(<span class="meta-string">&quot;username&quot;</span>)</span> username: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Path(<span class="meta-string">&quot;module&quot;</span>)</span> module: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Query(<span class="meta-string">&quot;page&quot;</span>)</span> currPage: <span class="type">Int</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: List&lt;RepoInfo&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET(<span class="meta-string">&quot;/search/repositories&quot;</span>)</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">searchRepos</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Query(<span class="meta-string">&quot;q&quot;</span>)</span> key: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Query(<span class="meta-string">&quot;sort&quot;</span>)</span> sort: <span class="type">String</span>? = <span class="string">&quot;updated&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Query(<span class="meta-string">&quot;order&quot;</span>)</span> order: <span class="type">String</span>? = <span class="string">&quot;desc&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Query(<span class="meta-string">&quot;page&quot;</span>)</span> currPage: <span class="type">Int</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: SearchResponse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建Retrofit实例<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">buildRetrofit</span><span class="params">()</span></span>: Retrofit &#123;</span><br><span class="line">     builder.addInterceptor(HttpLoggingInterceptor(<span class="keyword">object</span> : HttpLoggingInterceptor.Logger &#123;</span><br><span class="line">         <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">log</span><span class="params">(message: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">             Timber.d(message)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;).apply &#123;</span><br><span class="line">         level = HttpLoggingInterceptor.Level.BODY</span><br><span class="line">     &#125;).addInterceptor(<span class="keyword">object</span> : Interceptor &#123;</span><br><span class="line">         <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">intercept</span><span class="params">(chain: <span class="type">Interceptor</span>.<span class="type">Chain</span>)</span></span>: Response &#123;</span><br><span class="line">             <span class="keyword">val</span> userCredentials = <span class="string">&quot;<span class="variable">$username</span>:<span class="variable">$password</span>&quot;</span></span><br><span class="line">             <span class="keyword">val</span> basicAuth =</span><br><span class="line">                 <span class="string">&quot;Basic <span class="subst">$&#123;String(Base64.encode(userCredentials.toByteArray(), Base64.DEFAULT))&#125;</span>&quot;</span></span><br><span class="line">             <span class="keyword">val</span> original = chain.request()</span><br><span class="line">             <span class="keyword">val</span> requestBuilder = original.newBuilder()</span><br><span class="line">                 .header(<span class="string">&quot;Authorization&quot;</span>, basicAuth.trim &#123; it &lt;= <span class="string">&#x27; &#x27;</span> &#125;)</span><br><span class="line">             <span class="keyword">val</span> request = requestBuilder.build()</span><br><span class="line">             <span class="keyword">return</span> chain.proceed(request)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="keyword">return</span> Retrofit.Builder()</span><br><span class="line">         .client(builder.build())</span><br><span class="line">         .baseUrl(BASE_URL)</span><br><span class="line">         .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">         .build()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、-在ViewModel中使用"><a href="#三、-在ViewModel中使用" class="headerlink" title="三、 在ViewModel中使用"></a>三、 在ViewModel中使用</h2><code>kotlinx.coroutines.CoroutineScope</code> 接口中的注释有这么一句话<br><br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/30/16f561eaea6d630b~tplv-t2oaga2asx-image.image" alt="image.png"><br>所以启动一个协程一定需要一个<code>Scope</code>，也就是说每个suspend函数都有一个<code>CoroutineScope</code>，如果没有一定会报错。而Android的ViewModel中有扩展了一个<code>viewModelScope</code>，并且跟<code>lifecycle</code>绑定了，所以在ViewModel的onCleared方法上会自动帮我们cancel掉这个viewModelScope的所有Jobs。<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/30/16f561eae8114f24~tplv-t2oaga2asx-image.image" alt="图1"><br>为了方便使用，封装了一个BaseViewModel<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseViewModel</span> : <span class="type">ViewModel</span></span>() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">request</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        onError: (<span class="type">error</span>: <span class="type">Throwable</span>) -&gt; <span class="type">Unit</span> = &#123;&#125;, <span class="comment">// 不需要处理Error可以不传</span></span></span></span><br><span class="line"><span class="params"><span class="function">        execute: <span class="type">suspend</span> <span class="type">CoroutineScope</span>.() -&gt; <span class="type">T</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span> &#123;</span><br><span class="line">        viewModelScope.launch(errorHandler &#123; onError.invoke(it) &#125;) &#123;</span><br><span class="line">            launch(Dispatchers.IO) &#123;</span><br><span class="line">                execute()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">errorHandler</span><span class="params">(onError: (<span class="type">error</span>: <span class="type">Throwable</span>) -&gt; <span class="type">Unit</span>)</span></span>: CoroutineExceptionHandler &#123;</span><br><span class="line">        <span class="keyword">return</span> CoroutineExceptionHandler &#123; _, throwable -&gt;</span><br><span class="line">            Timber.d(throwable)</span><br><span class="line">            onError.invoke(throwable)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
使用继承 <code>BaseViewModel</code> 调用 <code>request</code> 方法即可。<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RepoViewModel</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> userRepo: UserDataSource,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> gitApi: GitApi</span><br><span class="line">) : BaseViewModel() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> _reposResult = BaseLiveData&lt;List&lt;RepoInfo&gt;&gt;()</span><br><span class="line">    <span class="keyword">val</span> repoResult: BaseLiveData&lt;List&lt;RepoInfo&gt;&gt;</span><br><span class="line">        <span class="keyword">get</span>() = _reposResult</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">fetchRepos</span><span class="params">(module: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        request &#123;</span><br><span class="line">            userRepo.currUser()?.let &#123;</span><br><span class="line">                <span class="keyword">val</span> result = gitApi.repos(it.nickname, module, <span class="number">1</span>)</span><br><span class="line">                _reposResult.update(result)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
OR<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fetchRepos</span><span class="params">(module: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        request(</span><br><span class="line">            onError = &#123;</span><br><span class="line">                <span class="comment">// handle error</span></span><br><span class="line">            &#125;,</span><br><span class="line">            execute = &#123;</span><br><span class="line">                userRepo.currUser()?.let &#123;</span><br><span class="line">                    <span class="keyword">val</span> result = gitApi.repos(it.nickname, module, <span class="number">1</span>)</span><br><span class="line">                    _reposResult.update(result)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
剩下的基本是LiveData和Fragment之间的订阅上的逻辑实现了。<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2>最近在学习，了解也不是很深，欢迎评论补充和提建议。 学习项目地址 <a href="https://github.com/BreakZero/Dithub">Dithub</a>。</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>MVVM</tag>
      </tags>
  </entry>
  <entry>
    <title>是否应该将Compose中的状态切分</title>
    <url>/2023/07/10/Do-we-need-to-split-state-of-Compose/</url>
    <content><![CDATA[<p>为什么会有这种疑问呢？<br>我们知道Compose是通过重组来刷新UI的，当一个State发生改变时，其对应的可重组函数的Lambda会重新执行，而我们通常在设计State时都是将当前界面相关属<br>combine成一个整体的State，所以我们在修改State时，其实就是让整个State都发生了变化，基本会让整个界面都发生重组不会跳过。下面通过一个简单的例子：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个整合的State</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">XModelState</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="keyword">val</span> age: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="keyword">val</span> intro: String</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Column(</span><br><span class="line">    modifier = Modifier</span><br><span class="line">    .fillMaxSize()</span><br><span class="line">    .padding(<span class="number">16.</span>dp)</span><br><span class="line">) &#123;</span><br><span class="line">    </span><br><span class="line">    println(<span class="string">&quot;Column&quot;</span>)</span><br><span class="line"></span><br><span class="line">    Wrapper &#123;</span><br><span class="line">        Text(text = <span class="string">&quot;Name is <span class="subst">$&#123;modelState.name&#125;</span>&quot;</span>).also &#123;</span><br><span class="line">            println(<span class="string">&quot;Name changed&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Wrapper &#123;</span><br><span class="line">        Text(text = <span class="string">&quot;Age is <span class="subst">$&#123;modelState.age&#125;</span>&quot;</span>).also &#123;</span><br><span class="line">            println(<span class="string">&quot;Age changed&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Wrapper &#123;</span><br><span class="line">        Text(text = <span class="string">&quot;Intro is <span class="subst">$&#123;modelState.intro&#125;</span>&quot;</span>).also &#123;</span><br><span class="line">            println(<span class="string">&quot;Intro changed&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Button(</span><br><span class="line">        modifier = Modifier.fillMaxWidth(),</span><br><span class="line">        onClick = &#123;</span><br><span class="line">            modelState = modelState.copy(</span><br><span class="line">                name = <span class="string">&quot;Dougie <span class="subst">$&#123;Random.nextInt(<span class="number">0</span>, <span class="number">10</span>)&#125;</span>&quot;</span>,</span><br><span class="line">                age = age + <span class="number">1</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    ) &#123;</span><br><span class="line">        Text(text = <span class="string">&quot;Update Model&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码中，当点击Update Model按钮来修改modelState时，3个Wrapper全部都发生重组，假设这个State其实还可能更大，有20多个属性，而当我们只修改<br>一部分相关的，很多相关的Composable应该skip re-compose。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">*       ----------------     -----------------      ---------------------</span><br><span class="line">*       | Click Button |  -&gt; | State changed |  -&gt;  | trigger recompose |</span><br><span class="line">*       ----------------     -----------------      ---------------------</span><br></pre></td></tr></table></figure>

<p>为了避免这个情况，目前Compose也没提供相关的api，好像也只能通过分割状态了，对应文章的标题。</p>
<h3 id="1-ViewModel层保留多个公开的State"><a href="#1-ViewModel层保留多个公开的State" class="headerlink" title="1. ViewModel层保留多个公开的State"></a>1. ViewModel层保留多个公开的State</h3><p>在ViewModel combine的时候就将State分割并提供多个State叫个UI层使用，而在操作的时候，我们也只会改变其对应的小State，其他State不会变化，<br>所以Compose上也只会重组其对应的可重组Lambda，而其他的则会跳过重组。</p>
<h3 id="2-使用-derivedStateOf"><a href="#2-使用-derivedStateOf" class="headerlink" title="2. 使用 derivedStateOf"></a>2. 使用 derivedStateOf</h3><p>在View层，依然是拿到整个大的State，我们通过增加内部属性并使derivedStateOf这个方法将State分割。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> age <span class="keyword">by</span> remember &#123;</span><br><span class="line">    derivedStateOf &#123;</span><br><span class="line">        modelState.age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> intro <span class="keyword">by</span> remember &#123;</span><br><span class="line">    derivedStateOf &#123;</span><br><span class="line">        modelState.intro</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上，将age和intro分割出来，在点击按钮是，age+1，而intro不变，通过日志，发现只有Age Changed，所以intro的被跳过重组了。</p>
<blockquote>
<p>在日常开发中，需求feature会越来越多，State也会随之而增加，以上两种方式虽然一定程度上能减少重组，但是也很大程度上增加了维护工作<br>和带来新的问题。</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在Compose上，UI的更新必然脱离不了重组，所以重组本身并不是大问题，我们需要注意的是尽量在可重组项中尽量少操作多余的工作。所以通常我们不必在意这些，<br>因为Compose帮我做了很多优化的工作了。<br>当然如果在某个UI上，有其中一部份UI变化相对比较频繁，而其他则很少，此时我建议分割出来</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyWallet Gradle Clean Up</title>
    <url>/2021/09/11/EasyWallet-Part-1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>记录并整理EasyWallet 小钱包开发过程</li>
<li>在项目中使用到：</li>
</ul>
<ol>
<li>Composing build + plugin 实现依赖库统一管理</li>
<li>Jetpack Compose</li>
<li>Hilt 依赖注入</li>
<li>Kotlin/Kotlin flow/Coroutine</li>
<li>Ktor 实现网络请求</li>
<li>Room 实现本地存储</li>
</ol>
<ul>
<li>本项目地址：<a href="https://github.com/BreakZero/EasyWallet-Mobile-Compose">EasyWallet-Compose</a></li>
</ul>
<h2 id="gradle-脚本管理"><a href="#gradle-脚本管理" class="headerlink" title="gradle 脚本管理"></a>gradle 脚本管理</h2><ul>
<li>创建新的模块作为Composing build，并在 <code>build.gradle.kts</code> 中加入如下代码实现plugin配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gradlePlugin &#123;</span><br><span class="line">    plugins &#123;</span><br><span class="line">        create(&quot;VersionPlugin&quot;) &#123;</span><br><span class="line">            id = &quot;version-plugin&quot; // change the name you like</span><br><span class="line">            implementationClass = &quot;com.easy.version.DependencyVersionPlugin&quot; // change package to what you done</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在 <code>src.main.kotlin</code> 目录下Plugin实现类实现接口 <code>Plugin&lt;Project&gt;</code>，这个plugin 的apply 方法会在任何你使用这个plugin的module 执行  <span id="more"></span></li>
<li>统一管理Configs。 （这里我为了区分feature模块和app模块，所以加了ignore list）<ol>
<li>首先我们在每个模块都需要的plugin，写一个Project的扩展函数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private fun Project.applyPlugin() &#123;</span><br><span class="line">    apply(plugin = &quot;com.android.library&quot;)</span><br><span class="line">    apply(plugin = &quot;kotlin-android&quot;)</span><br><span class="line">    apply(plugin = &quot;kotlin-kapt&quot;)</span><br><span class="line">    apply(plugin = &quot;kotlin-parcelize&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
然后在apply方法中使用<br><code>target.beforeEvaluate &#123; applyPlugin() &#125;</code><br>这里注意要加上beforeEvaluate，在执行前apply plugin</li>
<li>配置 android 块<br>增加扩展方法 <code>LibraryExtension.moduleConfig(isCore: Boolean)</code> (isCore这里算是我项目的特殊支持，为了实现buildConfigField的)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Suppress(&quot;UnstableApiUsage&quot;)</span><br><span class="line">private fun LibraryExtension.moduleConfig(isCore: Boolean) &#123;</span><br><span class="line">    compileSdk = BuildConfig.compileSdkVersion</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdk = BuildConfig.minSdkVersion</span><br><span class="line">        targetSdk = BuildConfig.targetSdkVersion</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility = JavaVersion.VERSION_11</span><br><span class="line">        targetCompatibility = JavaVersion.VERSION_11</span><br><span class="line">    &#125;</span><br><span class="line">    buildFeatures.also &#123;</span><br><span class="line">        it.compose = true</span><br><span class="line">    &#125;</span><br><span class="line">    composeOptions &#123;</span><br><span class="line">        kotlinCompilerExtensionVersion = Compose.version</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>最后在root project中增加  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">subprojects &#123;</span><br><span class="line">    apply(plugin = &quot;version-plugin&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  给每个模块都应用上plugin，当然也可以单独在module上直接应用</li>
<li>以上配置完成后，你会看到模块的 gradle 脚本基本就很少了， 如下  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.easy.version.*</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation(project(&quot;:core&quot;))</span><br><span class="line">    implementation(project(&quot;:core-ui&quot;))</span><br><span class="line"></span><br><span class="line">    implementation(com.easy.version.dependencies.Other.sqlcipher)</span><br><span class="line"></span><br><span class="line">    roomDependencies()</span><br><span class="line">    composeUI()</span><br><span class="line">    hiltDependencies()</span><br><span class="line">    unitTestDependencies()</span><br><span class="line">    androidTestDependencies()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>如此配置之后， 每新增一个子模块，都能统一快速的配置gradle</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>模块分离、Navigation管理…</p>
]]></content>
      <categories>
        <category>Gradle</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>我的一半2023</title>
    <url>/2023/07/08/Half-year-summary-of-2023/</url>
    <content><![CDATA[<p>如今已是2023年7月，回顾这半年，是失业的半年(已有5个多月)。一路过来，大致是前2个月跟几个朋友去了几个地方游玩，后几个月则是在投递简历并准备面试，<br>然而奇怪的是投了大大几十份简历，也就寥寥无几的面试机会，简历都改了好几遍了。反正后面这些时间是半学半玩加偶尔颓废吧。<br>千难万难，生活还要继续。</p>
<h3 id="学习方面"><a href="#学习方面" class="headerlink" title="学习方面"></a>学习方面</h3><ul>
<li>针对面试知识面准备而复习了些相关知识，比如JVM，Kotlin Coroutine等</li>
<li>对于Android方面上，看了些相关的源码学习其原理，比如ViewModel，LiveData，Retrofit</li>
<li>对于Web3则是学习了solidity相关的语法并编写了一个密码管理的简单合约</li>
</ul>
<h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>通过回顾半年来的过程，我有以下两个总结</p>
<span id="more"></span>
<h4 id="1-应该如何学习"><a href="#1-应该如何学习" class="headerlink" title="1. 应该如何学习"></a>1. 应该如何学习</h4><p>以往吧，为了面试准备，东学学西学学，一天下来，学习好几个毫不相关的几个方面的知识，但到了面试时候，被问到也只能说出个大概，也就是说学习过后的<br>知识很多被忘了，再过个几天基本就要重新复习一边才能想起。<br>前段时间，都在学习JVM相关的知识，期间某些知识点会彼此产生关联加深记忆和理解</p>
<h4 id="2-如何投入认真做事"><a href="#2-如何投入认真做事" class="headerlink" title="2. 如何投入认真做事"></a>2. 如何投入认真做事</h4><p>总结几个月时间在家在咖啡厅学习的过程中，哪些时候认真了并得到了情绪上的满足感，又有哪些时候都在想瞌睡和浪费时间<br>在没有目标，没有明确的需求结果的情况下，你学习的投入时间大概最多也就20分钟吧，在这种情况下，你想的只是我想多学点，能多学点就行，而这个过程<br>没有任何时刻有成就感来提供你继续学习下去的动力，完全无法投入学习享受这个过程。<br>而有明确目标和需求的情况下，就比如工作，产品给你一个需求，你在做这个需求的时候，我需要解决什么问题，然后通过一通查阅资料了解，然后偶尔发现要达到<br>这个目的需要了解另外一些，又是一顿操作后，大致接近完成需求。而这个过程中，你每个小过程都有一定的输出让你觉得有所成就，最终完成需求。如果是这样的一个<br>流程，相信你工作的时候会非常认真和投入，高效率。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>个人一些经历，感觉有些表达不是很清楚，还在努力提升表达和写作能力中。<br>我们要有目的和系统性的学习，才能快速成长，在学习的过程中，尽量让我们有输出，因为只有输出才会有成就感才会有动力继续。</p>
<p>加油，2023下半年</p>
]]></content>
      <categories>
        <category>随记</category>
      </categories>
      <tags>
        <tag>2023</tag>
      </tags>
  </entry>
  <entry>
    <title>RPC with Kotlinx Serialization</title>
    <url>/2022/06/08/RPC-with-Kotlinx-Serialization/</url>
    <content><![CDATA[<blockquote>
<p>因为将项目从Retrofit切换到Ktor和gson切换到kotlinx serialize。而kotlinx serialize和gson的实现差异导致在rpc接口中对于rpc 请求参数类型不一致的情况下，序列化出现了异常报错，比如类似一下的请求Body</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_call&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;data&quot;</span>: <span class="string">&quot;0x5ec88c7900000000000000000000000081080a7e991bcdddba8c2302a70f45d6bd369ab5&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;0x81080a7e991bcDdDBA8C2302A70f45d6Bd369Ab5&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;0xb3831584acb95ED9cCb0C11f677B5AD01DeaeEc0&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;latest&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="List-lt-Any-gt-Contextual"><a href="#List-lt-Any-gt-Contextual" class="headerlink" title="List&lt;Any&gt; + @Contextual"></a><code>List&lt;Any&gt;</code> + @Contextual</h3><p>本来以为在Kotlinx Serialize上会像Gson一样轻松解决，一开始便对于原来的数据结构定义成</p>
<span id="more"></span>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Serializable</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBaseRpc</span></span>(</span><br><span class="line">    <span class="keyword">val</span> jsonrpc: String,</span><br><span class="line">    <span class="keyword">val</span> method: String,</span><br><span class="line">    <span class="keyword">val</span> params: List&lt;<span class="meta">@Contextual</span> Any&gt;,</span><br><span class="line">    <span class="keyword">val</span> id: <span class="built_in">Int</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>并在Json 配置的时候将 Contextual配置上</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Json &#123;</span><br><span class="line">    useArrayPolymorphism = <span class="literal">true</span></span><br><span class="line">    prettyPrint = <span class="literal">true</span></span><br><span class="line">    allowStructuredMapKeys = <span class="literal">true</span></span><br><span class="line">    serializersModule = SerializersModule &#123;</span><br><span class="line">        contextual(Any::<span class="class"><span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            TestCaller.serializer()</span><br><span class="line">            String.serializer()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将单元测试代码跑起来后发现，contextual 只使用了最后一个serializer来解析Any类型，所以这个方向无法实现想要的结果<br>报错如下：<p style="color:red">***.TestCaller cannot be cast to class java.lang.String</p></p>
<blockquote>
<p>Note: 如果将两个serializer调换顺序就会发现报错也会两个类型互换</p>
</blockquote>
<h3 id="通过-Interface-Polymorphic"><a href="#通过-Interface-Polymorphic" class="headerlink" title="通过 Interface + Polymorphic"></a>通过 Interface + Polymorphic</h3><p>polymorphic多态的意思，顾名思义，可以根据实际情况进行选择对应的Serializer，所以需要有一个基类(可以interface，sealed…)</p>
<ol>
<li>首先定义一个interface<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">interface</span> <span class="title">Parameter</span></span></span><br></pre></td></tr></table></figure></li>
<li>定义subclass<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Serializable</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">CallParameter</span></span>(</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span>: String,</span><br><span class="line">    <span class="keyword">val</span> from: String,</span><br><span class="line">    <span class="keyword">val</span> to: String</span><br><span class="line">) : Parameter</span><br><span class="line"></span><br><span class="line"><span class="meta">@Serializable</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">IntListParameter</span></span>(</span><br><span class="line">    <span class="keyword">val</span> items: List&lt;<span class="built_in">Int</span>&gt;</span><br><span class="line">) : Parameter</span><br><span class="line"></span><br><span class="line"><span class="meta">@Serializable</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">StringParameter</span></span>(</span><br><span class="line">    <span class="keyword">val</span> content: String</span><br><span class="line">) : Parameter</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li>配置Json模块<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Json &#123;</span><br><span class="line">    useArrayPolymorphism = <span class="literal">true</span></span><br><span class="line">    prettyPrint = <span class="literal">true</span></span><br><span class="line">    ignoreUnknownKeys = <span class="literal">true</span></span><br><span class="line">    allowStructuredMapKeys = <span class="literal">true</span></span><br><span class="line">    serializersModule = SerializersModule &#123;</span><br><span class="line">        polymorphic(List::<span class="class"><span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            ListSerializer(ParameterSerialize)</span><br><span class="line">        &#125;</span><br><span class="line">        polymorphic(Parameter::<span class="class"><span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            subclass(CallParameter::<span class="class"><span class="keyword">class</span>, <span class="type">CallParameter.serializer</span></span>())</span><br><span class="line">            subclass(StringParameter::<span class="class"><span class="keyword">class</span>, <span class="type">StringParameterSerializer)</span></span></span><br><span class="line">            subclass(IntListParameter::<span class="class"><span class="keyword">class</span>, <span class="type">IntListParameterSerializer)</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>针对不同结构定义不同的Serializer<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> IntListParameterSerializer : KSerializer&lt;IntListParameter&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">deserialize</span><span class="params">(decoder: <span class="type">Decoder</span>)</span></span>: IntListParameter &#123;</span><br><span class="line">        <span class="keyword">return</span> decoder.decodeStructure(descriptor) &#123;</span><br><span class="line">            <span class="keyword">val</span> items = decodeSerializableElement(descriptor, <span class="number">0</span>, ListSerializer(<span class="built_in">Int</span>.serializer()))</span><br><span class="line">            IntListParameter(</span><br><span class="line">                items = items</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> descriptor: SerialDescriptor</span><br><span class="line">        <span class="keyword">get</span>() = buildClassSerialDescriptor(<span class="string">&quot;IntListParameter&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.element&lt;List&lt;<span class="built_in">Int</span>&gt;&gt;(<span class="string">&quot;items&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">serialize</span><span class="params">(encoder: <span class="type">Encoder</span>, value: <span class="type">IntListParameter</span>)</span></span> &#123;</span><br><span class="line">        encoder.encodeSerializableValue(ListSerializer(<span class="built_in">Int</span>.serializer()), value.items)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OptIn(ExperimentalSerializationApi::class)</span></span><br><span class="line"><span class="meta">@Serializer(forClass = BaseRpcRequest::class)</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> RpcRequestBodySerializer : KSerializer&lt;BaseRpcRequest&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">deserialize</span><span class="params">(decoder: <span class="type">Decoder</span>)</span></span>: BaseRpcRequest &#123;</span><br><span class="line">        <span class="keyword">return</span> decoder.decodeStructure(descriptor) &#123;</span><br><span class="line">            <span class="keyword">var</span> rpc: String? = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">var</span> method: String? = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">var</span> params: List&lt;Parameter&gt; = emptyList()</span><br><span class="line">            <span class="keyword">var</span> id: <span class="built_in">Int</span>? = <span class="literal">null</span></span><br><span class="line">            <span class="symbol">loop@</span> <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">when</span> (decodeElementIndex(descriptor)) &#123;</span><br><span class="line">                    CompositeDecoder.DECODE_DONE -&gt; <span class="keyword">break</span><span class="symbol">@loop</span></span><br><span class="line"></span><br><span class="line">                    <span class="number">0</span> -&gt; rpc = decodeStringElement(descriptor, <span class="number">0</span>)</span><br><span class="line">                    <span class="number">1</span> -&gt; method = decodeStringElement(descriptor, <span class="number">1</span>)</span><br><span class="line">                    <span class="number">2</span> -&gt; params = decodeSerializableElement(descriptor, <span class="number">2</span>, ListSerializer(ParameterSerialize))</span><br><span class="line">                    <span class="number">3</span> -&gt; id = decodeIntElement(descriptor, <span class="number">3</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            BaseRpcRequest(</span><br><span class="line">                jsonrpc = rpc.orEmpty(),</span><br><span class="line">                method = method.orEmpty(),</span><br><span class="line">                params = params,</span><br><span class="line">                id = id ?: <span class="number">1</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> descriptor: SerialDescriptor</span><br><span class="line">        <span class="keyword">get</span>() = buildClassSerialDescriptor(<span class="string">&quot;BaseRpcRequest&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.element&lt;String&gt;(<span class="string">&quot;jsonrpc&quot;</span>)</span><br><span class="line">            <span class="keyword">this</span>.element&lt;String&gt;(<span class="string">&quot;method&quot;</span>)</span><br><span class="line">            <span class="keyword">this</span>.element&lt;List&lt;Parameter&gt;&gt;(<span class="string">&quot;params&quot;</span>)</span><br><span class="line">            <span class="keyword">this</span>.element&lt;<span class="built_in">Int</span>&gt;(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">serialize</span><span class="params">(encoder: <span class="type">Encoder</span>, value: <span class="type">BaseRpcRequest</span>)</span></span> &#123;</span><br><span class="line">        encoder.encodeStructure(descriptor) &#123;</span><br><span class="line">            encodeStringElement(descriptor, <span class="number">0</span>, value.jsonrpc)</span><br><span class="line">            encodeStringElement(descriptor, <span class="number">1</span>, value.method)</span><br><span class="line">            encodeSerializableElement(descriptor, <span class="number">2</span>, ListSerializer(ParameterSerialize), value.params)</span><br><span class="line">            encodeIntElement(descriptor, <span class="number">3</span>, value.id)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li>如果需要deserialize，便需要加上如下选择器<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> ParameterSerialize : JsonContentPolymorphicSerializer&lt;Parameter&gt;(Parameter::<span class="class"><span class="keyword">class</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">selectDeserializer</span><span class="params">(element: <span class="type">JsonElement</span>)</span></span>: DeserializationStrategy&lt;<span class="keyword">out</span> Parameter&gt; &#123;</span><br><span class="line">        println(<span class="string">&quot;element: <span class="variable">$element</span>, obj: <span class="subst">$&#123;element.jsonObject&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// override the condition for your point</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">when</span> &#123;</span><br><span class="line">            <span class="string">&quot;content&quot;</span> <span class="keyword">in</span> element.jsonObject -&gt; StringParameterSerializer</span><br><span class="line">            <span class="string">&quot;items&quot;</span> <span class="keyword">in</span> element.jsonObject -&gt; IntListParameterSerializer</span><br><span class="line">            <span class="keyword">else</span> -&gt; CallParameter.serializer()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
运行单元测试，验证通过：<br><img src="/images/pic1.png" alt="Unit Test Result!" title="Unit Test Result"></li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>只是为了在项目中减少gson的使用，所以花了点时间验证下具体情况，但是：<br>虽然目前看起来是解决了问题，不过相对来说比较麻烦，并且如果类型越来越多也会增加不必要的工作量，所以这里更建议直接使用gson</p>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin Serialization</tag>
      </tags>
  </entry>
  <entry>
    <title>Compose的重组作用域</title>
    <url>/2023/07/06/Scoped-recomposition-in-Jetpack-Compose/</url>
    <content><![CDATA[<p>在了解Compose的重组作用域之前，我们先来了解下重组是什么</p>
<h3 id="什么是重组"><a href="#什么是重组" class="headerlink" title="什么是重组"></a>什么是重组</h3><p>对于Jetpack Compose，即使是初学者也都知道它被称为声明式UI开发，相对于之前通过xml方式的命令式UI。而在命令式UI模式下，如果我们想要更新一个widget，我们需要拿到这个widget通过调用其setter函数来改变其内部状态。但是Jetpack Compose中的widget相对无状态并不提供setter/getter函数，而是重新调用可组合函数来实现更新，这个过程就叫重组。目前Jetpack Compose重组是在UI线程执行的，所以重组过程是有性能消耗的。为此，Compose编译器内部做了大量工作保证重组的范围尽可能小来提升重组效率。</p>
<h3 id="重组范围"><a href="#重组范围" class="headerlink" title="重组范围"></a>重组范围</h3><p>重组范围在Compose中是一个很重要的组成部份，通过尽量缩小重组范围来减少Compose在准备每一帧时的工作量。</p>
<ul>
<li>它们是通过重组更新Compose节点的最小单位</li>
<li>它们通过跟踪观察基于快照的状态对象，并在这些状态变化时会无效<span id="more"></span>
对于每个<code>non-inline</code>并且返回<code>Unit</code>的可组合函数， Compose编译器会生成代码将这个函数包装到一个可重组块中，当这个代码块被标记为Invalidated时，Compose Runtime将确保在渲染下一帧之前该代码块被重新执行（重组）。<br>PS: <p style="color:red">是怎样被标记为Invalidated，这块关系到State/Snapshot暂时不展开，反正先记住，不依赖State的代码是不参与重组的。</p></li>
</ul>
<h3 id="为什么要non-inline且没有返回值的函数才可作为可重组块"><a href="#为什么要non-inline且没有返回值的函数才可作为可重组块" class="headerlink" title="为什么要non-inline且没有返回值的函数才可作为可重组块"></a>为什么要non-inline且没有返回值的函数才可作为可重组块</h3><p>inline函数，在编译过程中会直接将函数体拷贝到调用处，所以它只能共享调用者的重组范围<br>对于有返回值的函数，由于返回值的变化会影响调用者，因此无法单独重组，而必须连同调用方一同参与重组，因此它不能作为入口被标记为invalid</p>
<h3 id="表达式和函数调用"><a href="#表达式和函数调用" class="headerlink" title="表达式和函数调用"></a>表达式和函数调用</h3><p>在深入了解最小重组范围前，我们先了解一个关于常规旧函数调用如何工作的基本概念。在Java/Kotlin中，当你将表达式传递给函数时，该表达式会在调用函数中计算。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">println(<span class="string">&quot;hello&quot;</span> + <span class="string">&quot;world&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>它等价于</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> arg = <span class="string">&quot;hello&quot;</span> + <span class="string">&quot;world&quot;</span></span><br><span class="line">println(arg)</span><br></pre></td></tr></table></figure>
<p>简而言之，先执行表达式得到结果，在执行函数调用</p>
<h3 id="确认重组作用域"><a href="#确认重组作用域" class="headerlink" title="确认重组作用域"></a>确认重组作用域</h3><p>大致了解了表达式和函数调用后，我们通过一个简单的例子过一下，先看下面的代码块</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span> <span class="function"><span class="keyword">fun</span> <span class="title">Foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> text <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="string">&quot;&quot;</span>) &#125;</span><br><span class="line">    println(<span class="string">&quot;TAG: Foo Scope&quot;</span>)</span><br><span class="line">    Button(onClick = &#123; text = <span class="string">&quot;<span class="variable">$text</span>\n<span class="variable">$text</span>&quot;</span> &#125;) &#123;</span><br><span class="line">        println(<span class="string">&quot;TAG: Button lambda Scope&quot;</span>)</span><br><span class="line">        Text(text).also &#123;</span><br><span class="line">            println(<span class="string">&quot;TAG: Text Scope&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-为什么text改变后，不是只有Text发生重组"><a href="#1-为什么text改变后，不是只有Text发生重组" class="headerlink" title="1. 为什么text改变后，不是只有Text发生重组"></a>1. 为什么text改变后，不是只有Text发生重组</h4><p>点击Button时，State <code>text</code> 被重新复制而改变，而State <code>text</code>只有Text访问到，为什么重组范围不是只有Text？<br>从上面代码块看，我们知道text其实是一个表达式，而Text则是一个函数，所以text计算结果是在调用Text之前，也就是Button的lambda</p>
<h4 id="2-为什么不是整个Foo发生重组"><a href="#2-为什么不是整个Foo发生重组" class="headerlink" title="2. 为什么不是整个Foo发生重组"></a>2. 为什么不是整个Foo发生重组</h4><p>我们知道当State发生变化时才会发生重组，而Foo中没有访问任何State对象，所以它不会发生重组。让我们修改下代码看看，将<code>by</code>改成<code>=</code>，逻辑就清晰了</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span> <span class="function"><span class="keyword">fun</span> <span class="title">Foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> text: MutableState&lt;String&gt; = remember &#123; mutableStateOf(<span class="string">&quot;&quot;</span>) &#125;</span><br><span class="line">    println(<span class="string">&quot;TAG: Foo Scope&quot;</span>)</span><br><span class="line">    Button(onClick = &#123; text.value = <span class="string">&quot;<span class="subst">$&#123;text.value&#125;</span>\n<span class="subst">$&#123;text.value&#125;</span>&quot;</span> &#125;) &#123;</span><br><span class="line">        println(<span class="string">&quot;TAG: Button lambada Scope&quot;</span>)</span><br><span class="line">        Text(text.value).also &#123;</span><br><span class="line">            println(<span class="string">&quot;TAG: Text Scope&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显而易见，text一直都是同一个MutableState对象，修改的只不过是它内部持有的value，而value在Text中访问</p>
<h4 id="3-为什么不是Button发生重组"><a href="#3-为什么不是Button发生重组" class="headerlink" title="3. 为什么不是Button发生重组"></a>3. 为什么不是Button发生重组</h4><p>因为<code>Foo</code>没发生重组，所以重组时并不会调用Button函数</p>
<h4 id="4-onClick-lambada表达式呢"><a href="#4-onClick-lambada表达式呢" class="headerlink" title="4. onClick lambada表达式呢"></a>4. onClick lambada表达式呢</h4><p>重组范围只能是在可重组函数中，即使handlers，<code>Button</code>的<code>onClick</code>都不是可重组函数。所以这种函数不在重组范围内。</p>
<h3 id="重组中-Inline-的坑"><a href="#重组中-Inline-的坑" class="headerlink" title="重组中 Inline 的坑"></a>重组中 Inline 的坑</h3><p>前面也提到了，inline函数是将代码拷贝，所以共享调用者的重组范围。在Compose中很多常见的widget被修饰成inline函数的，比如<code>Column</code>,<code>Row</code>,<code>Box</code>等。</p>
<p>原文地址：<a href="https://dev.to/zachklipp/scoped-recomposition-jetpack-compose-what-happens-when-state-changes-l78">Scoped recomposition in Jetpack Compose — what happens when state changes?</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Jetpack Compose</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP协议的3次握手和4次挥手</title>
    <url>/2023/08/28/TCP-vs-UDP/</url>
    <content><![CDATA[<h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>TCP（全称：Transmission Control Protocol）是计算机网络中用于设备间通信的传输层协议的一种，它是面向连接的传输协议，<br>还提供了各种机制保证传输过程的可靠性，包括错误检查，流量控制等机制。</p>
<h3 id="3次握手"><a href="#3次握手" class="headerlink" title="3次握手"></a>3次握手</h3><p>要清晰理解3次握手的过程，先来想2个问题：</p>
<ol>
<li>3次握手的目的是什么？</li>
<li>通过什么保证握手过程客户端和服务端相互理解？</li>
</ol>
<h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>目的？TCP是面向连接的，所以很明显，3次握手的目的是建立连接。</p>
<h4 id="通过什么数据-或信息-使得客户端和服务端相互理解并成功建立连接？"><a href="#通过什么数据-或信息-使得客户端和服务端相互理解并成功建立连接？" class="headerlink" title="通过什么数据(或信息)使得客户端和服务端相互理解并成功建立连接？"></a>通过什么数据(或信息)使得客户端和服务端相互理解并成功建立连接？</h4><p>既然是建立连接，那自然需要沟通，3次握手就是3次沟通的过程，在这个沟通的过程中建立起连接。既然有沟通就需要消息承载沟通信息。</p>
<span id="more"></span>
<p>首先了解下TCP报文首部字段 (<a href="%22https://developer.aliyun.com/article/975295%22">拷贝来源</a>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 16位端口号：源端口号，主机该报文段是来自哪里；目标端口号，要传给哪个上层协议或应用程序</span><br><span class="line">- 32位序号：一次TCP通信（从TCP连接建立到断开）过程中某一个传输方向上的字节流的每个字节的编号。</span><br><span class="line">- 32位确认号：用作对另一方发送的tcp报文段的响应。其值是收到的TCP报文段的序号值加1。</span><br><span class="line">- 4位头部长度：表示tcp头部有多少个32bit字（4字节）。因为4位最大能标识15，所以TCP头部最长是60字节。</span><br><span class="line">- 6位标志位：URG(紧急指针是否有效)，ACK（表示确认号是否有效），PSH（缓冲区尚未填满），RST（表示要求对方重新建立连接），SYN（建立连接消息标志接），FIN（表示告知对方本端要关闭连接了）</span><br><span class="line">- 16位窗口大小：是TCP流量控制的一个手段。这里说的窗口，指的是接收通告窗口。它告诉对方本端的TCP接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。</span><br><span class="line">- 16位校验和：由发送端填充，接收端对TCP报文段执行CRC算法以检验TCP报文段在传输过程中是否损坏。注意，这个校验不仅包括TCP头部，也包括数据部分。这也是TCP可靠传输的一个重要保障。</span><br><span class="line">- 16位紧急指针：一个正的偏移量。它和序号字段的值相加表示最后一个紧急数据的下一字节的序号。因此，确切地说，这个字段是紧急指针相对当前序号的偏移，不妨称之为紧急偏移。TCP的紧急指针是发送端向接收端发送紧急数据的方法。</span><br></pre></td></tr></table></figure>


<p>看到标志位了没？对于3次握手和4次挥手，我们只关注以下3个：</p>
<ul>
<li>SYN -&gt; Synchronize的缩写，表示请求初始化或建立连接</li>
<li>ACK -&gt; Acknowledgement的缩写，表示确认收到请求消息数据</li>
<li>FIN -&gt; Final的缩写，请求终止一个连接</li>
</ul>
<p>数据包头部字段：</p>
<ul>
<li>seq -&gt; Sequence number, 序列号，用于沟通并确保消息顺序的</li>
<li>ack -&gt; Acknowledge number，是对上一个包的序号进行确认的号，ack = seq + 1</li>
</ul>
<p>过程示意图：<br><img src="/images/tcp_3ways_handshake.png" alt="3Ways Handshake" title="3Ways Handshake"><br>经过3次握手建立连接：</p>
<ul>
<li><h5 id="第一次握手"><a href="#第一次握手" class="headerlink" title="第一次握手"></a>第一次握手</h5>Client将SYN设置为1，并随意生成一个序列号值为x(seq = x)，包装好数据包发送至Server，进入等待Server确认状态。</li>
<li><h5 id="第二次握手"><a href="#第二次握手" class="headerlink" title="第二次握手"></a>第二次握手</h5>Server收到SYN消息，知道Client想建立连接，并作出回应。SYN和ACK设置为1，ack number = x + 1，随机产生一个序列号y<br>给seq，包装数据包发送给Client，Server进入已接受并回应状态。</li>
<li><h5 id="第三次握手"><a href="#第三次握手" class="headerlink" title="第三次握手"></a>第三次握手</h5>Client收到Server的确认回应后，拿到确认回应的数据，检查对应的数据是否正确：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. ack 是否为 x+1</span><br><span class="line">2. ACK 是否和Client请求时一致</span><br></pre></td></tr></table></figure>
经过上面数据检查通过后，同样需要给Server发送确认回应消息，Server再收到回应消息同样做以上2步检查。<br>如果检查通过，则连接建立成功。Client和Server进入<code>ESTABLISHED</code>状态。完成3次握手。接下来可以相互开始传输数据了。</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.geeksforgeeks.org/tcp-3-way-handshake-process/">TCP 3-Way Handshake Process</a><br><a href="https://packetlife.net/blog/2010/jun/7/understanding-tcp-sequence-acknowledgment-numbers/">Understanding TCP Sequence and Acknowledgment Numbers</a></p>
<!-- ### TCP和UDP两协议的区别？ -->
<!-- 作为一个Android开发，在面试的时候也经常会被问到这个问题。笔者一直好奇问这个的意义的点在哪？ -->
<!-- 毕竟貌似在移动端开发的时候几乎说很少甚至没有需要考虑这方面的情况（也许经验和项目上的原因吧）。哈哈哈，这些都是题外话啦！ -->
<!-- 回归正题。 -->

<!-- ### 区别 -->
<!-- TCP（Transmission Control Protocol）和UDP（User Datagram Protocol）都是网络中用于设备间通信的传输层协议。 -->
<!-- 它们最主要的区别是TCP是面向连接的协议，而UDP是无连接的协议。 -->

<!-- #### 1. 可靠性 -->
<!-- - TCP 是一种面向连接的协议，这意味着它在发送者和接收者之间建立了可靠有序的连接。它保证数据包会以正确的顺序、没有错误地传递。 -->
<!-- - UDP 是一种无连接协议，不像 TCP 那样提供同样级别的可靠性。它不能保证所有数据包都会被传递，数据包可能无序地到达或丢失，而且没有通知。 -->

<!-- #### 2. 传递顺序 -->
<!-- - 通过 TCP 发送的数据按照发送顺序进行传递。这对于需要顺序传递数据的应用程序（如网页或文件传输）非常重要。 -->
<!-- - UDP 不保证传递顺序。它适用于实时通信比严格顺序更重要的情况，比如流媒体或在线游戏等。 -->

<!-- #### 3. 错误检查 -->
<!-- - TCP 提供错误检查机制以确保数据完整性。如果数据包丢失或损坏，TCP 将请求重新传输缺失或损坏的数据。 -->
<!-- - UDP 不执行错误检查或纠正。如果需要，应用程序需要处理任何错误。 -->

<!-- #### 4. 流量控制 -->
<!-- - TCP 使用流量控制机制来管理发送者和接收者之间的数据传输速率。这有助于防止拥塞，并确保接收者能够处理传入的数据。 -->
<!-- - UDP 不包括内置的流量控制机制。如果数据发送过快，它可能会超负荷地影响接收者。 -->

<!-- #### 5. 资源开销 -->
<!-- - TCP 的开销较高，因为需要额外的连接建立、错误检查和流量控制机制。 -->
<!-- - UDP 的开销较低。 -->]]></content>
  </entry>
  <entry>
    <title>TODO List KMM 介绍</title>
    <url>/2023/08/21/TODO-List-KMM-Project-Introduce/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&emsp;TODO List KMM是一个基于Kotlin Multiplatform Mobile实现的一个小项目，主要提供查看Todo task列表，增加/删除/编辑task功能，目前有加上sign in/sign up页面，但是没有整合后端，有时间可能会加上。当然，这并不重要，本篇文章主要为了介绍KMM项目结构和公共模块抽取的个人想法和学习实践过程的一个回顾。<br>项目地址在文末。</p>
<blockquote>
<p>至今，虽然Kotlin Multiplatform可以直接使用Compose实现两端UI了，但是它还处于非稳定版本，<br>而且实际上在iOS上存在卡顿现象，所以TODO List还是使用SwiftUI/Jetpack Compose分别实现Android/iOS 界面</p>
</blockquote>
<h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>&emsp;作为一个KMM项目，Android/iOS 这两个模块是必不可少的，它们分别是用来实现Android/iOS页面和使用或构建数据逻辑相关的代码，而shared当然也很重要，shared是两平台的共用代码。在大多数项目中，我们的数据来源双端都是一致的，所以shared模块完全可以作为一个数据<br>提供者，不管是来源是后端api还是本地，都是没有任何异议的。当然，除此之外，还可以提供一些工具扩展类。</p>
<h3 id="项目创建和配置"><a href="#项目创建和配置" class="headerlink" title="项目创建和配置"></a>项目创建和配置</h3><ol>
<li>首先我们创建一个KMM项目，catalogs管理依赖库的方式很早就被推荐使用了，所以我们将准备好的<code>libs.versions.toml</code>文件copy到<code>gradle</code>目录下<br><code>composite build</code>同样也是比较推荐的一种做法，从nowinandroid项目中copy过来，并加以修改放到我们项目中，命名为<code>build-logic</code>，里面有插件，<br>这些插件是为了减少的module下的gradle配置模板代码从而更易于管理。</li>
<li>配置好项目之后，确定shared模块主要需要实现哪些数据相关的功能，并将其分模块来实现，在该项目中有4个模块分别是core, data, database, model.</li>
</ol>
<ul>
<li>2.1 core 提供核心工具类或扩展方法</li>
<li>2.2 model 封装上层需要的数据结构，用于UI或者逻辑需要的过度Model类</li>
<li>2.3 database 提供本地存储和读取功能作用</li>
<li>2.4 data 数据源层，主要是combine本地或者远程api数据来源的组装和mapping等逻辑<span id="more"></span>
除了以上，同样可以添加一个domain层用来处理复杂的用例（domain层是可有可无的）</li>
</ul>
<ol start="3">
<li>根据配置精简各个模块的gradle 配置之后便可以专注于代码的编写了。在编写代码的时候，要考虑好哪些模块实现哪些功能，<br>解耦之类的问题。<blockquote>
<p>Noted: 很多时候，我们在UI层需要实现一些数据的转换（KMM Compiler生成的类和Swift的类型之间），在Swift上实现起来比较麻烦。<br>但是我们知道Kotlin中有Native和Object-C已经帮我们实现了很多数据的对应和方法，所以可以将这些转换放到iOSMain中实现。比如ByteArray和UIImage</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> <span class="keyword">data</span> = bytes.usePinned &#123;</span><br><span class="line">    NSData.create(</span><br><span class="line">    bytes = it.addressOf(<span class="number">0</span>),</span><br><span class="line">    length = bytes.size.toULong()</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> UIImage(<span class="keyword">data</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="sqldelight-上的坑"><a href="#sqldelight-上的坑" class="headerlink" title="sqldelight 上的坑"></a>sqldelight 上的坑</h4><p>&emsp;虽然依赖库中的gradle 已经在lineropts中加上了<code>-lsqlite3</code>，但是有时候在运行iOS平台项目还是会出现找不到的问题。<br>使用XCode打开iOS项目，在Build Settings中的Other linker flags上加上就好了</p>
<h4 id="Koin"><a href="#Koin" class="headerlink" title="Koin"></a>Koin</h4><p>&emsp;对于KMM项目，我个人觉得Koin是目前最舒服的一个依赖注入方式，其也只是作用于shared中的Kotlin代码，Swift还是需要通过调用init实例化操作。所以为了防止依赖注入的helper类随着项目扩大而mapping方法也增加到可怕的数量，建议一开始就管理分类。</p>
<h4 id="Flow和协程"><a href="#Flow和协程" class="headerlink" title="Flow和协程"></a>Flow和协程</h4><p>&emsp;Swift的闭包很好用，对于suspend方法都有一个<code>completionHandler</code>的闭包回调，对于Flow当然也可以使用闭包在相关的时候进行回调。<br>比如:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// onEach(it) onThrow(it) onComplete()是闭包参数</span></span><br><span class="line">flow.onEach &#123; onEach(it) &#125;</span><br><span class="line">    .<span class="keyword">catch</span> &#123; onThrow(it) &#125;</span><br><span class="line">    .onCompletion &#123; onComplete() &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Note：需要注意的是，要清楚这个回调在哪个线程中，如果你需要在回调方法后实现dismiss当前界面或者其他UI操作，而协程又是在IO线程中执行，并没有切换会主线程再调用回调，这时候回调同样是在IO线程，而IO线程中的UI操作是无效果的（dismiss不会有效果）需要使用DispatchQueue.main切到主线程中<br><span style="color:red">那么我们是应该注意在kotlin代码上主动切回主线程再进行回调还是让其在Swift上来考虑呢？</span></p>
</blockquote>
<p><a href="https://github.com/BreakZero/TODO-LIST-KMM">TODO-LIST-KMM</a></p>
]]></content>
      <categories>
        <category>Kotlin Multiplatform</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>SwiftUI</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 读取存储在Container的文件问题</title>
    <url>/2023/08/13/iOS-read-local-file-issue/</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在使用KMM实现iOS平台文件存储时，通过到处container文件可以查看到文件确实存在目录下，但是在调用<code>NSData.dataWithContentsOfFile</code>时总是返回空，根据错误信息得知找不到该文件或目录<code>No such File or Directory</code>。其中代码如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> errorPtr: ObjCObjectVar&lt;NSError?&gt; = alloc()</span><br><span class="line">NSData.dataWithContentsOfFile(fullPath, options = <span class="number">0</span>, error = errorPtr.ptr)?.let &#123; bytes -&gt;</span><br><span class="line">    <span class="keyword">val</span> array = ByteArray(bytes.length.toInt())</span><br><span class="line">    bytes.getBytes(array.refTo(<span class="number">0</span>).getPointer(<span class="keyword">this</span>), bytes.length)</span><br><span class="line">    <span class="keyword">return</span><span class="symbol">@withContext</span> array</span><br><span class="line">&#125;</span><br><span class="line">println(errorPtr.value?.description.orEmpty())</span><br><span class="line"><span class="keyword">return</span><span class="symbol">@withContext</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure>
<p>errorPtr是为了查看具体错误，所以加上这个为了更好定位问题</p>
<span id="more"></span>

<h3 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h3><ol>
<li>通过上面的error日志中得知，大概率是因为fullPath这个目录是一个错误的目录了，而我又从device中导出了<code>xxx.xcappdata</code>，<br>在这个目录下确实能找到对应名字的文件，而且文件是没有问题的，这个可以确定问题是文件是存在的，但是目录又不一致</li>
<li>既然文件存在，但是目录上却找不到该文件，问题出在哪呢？于是想通过代码打印出fullPath和目录下所有文件的路径对比是否一致，上代码：<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fileManager <span class="operator">=</span> <span class="type">FileManager</span>.default</span><br><span class="line"><span class="keyword">let</span> documentsURL <span class="operator">=</span> fileManager.urls(for: .documentDirectory, in: .userDomainMask)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> fileURLs <span class="operator">=</span> <span class="keyword">try</span> fileManager.contentsOfDirectory(at: documentsURL, includingPropertiesForKeys: <span class="literal">nil</span>)</span><br><span class="line">    <span class="built_in">print</span>(fileURLs)</span><br><span class="line">    <span class="comment">// process files</span></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error while enumerating files <span class="subst">\(documentsURL.path)</span>: <span class="subst">\(error.localizedDescription)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这一块是Swift的代码，然后获取document Directory的url（因为我存储文件的目录就是这个），然后通过遍历将所有文件url打印并对比</li>
</ol>
<ul>
<li>fullPath路径是这样的<blockquote>
<p>/var/mobile/Containers/Data/Application/3FC1CCE9-A788-47AB-902A-FA133FAA3D30/Documents/60F570BE-2A16-4EFB-96B3-9203C0A0ABCE.jpg</p>
</blockquote>
</li>
<li>而文件url则是<blockquote>
<p>file:///private/var/mobile/Containers/Data/Application/C5AC5178-6887-40F4-9EE5-8D56CB830CB3/Documents/60F570BE-2A16-4EFB-96B3-9203C0A0ABCE.jpg</p>
</blockquote>
</li>
</ul>
<p>果然，Application后面的UUID并不一致，那全路径肯定也是不对的咯<br>通过查阅资料，得知在<code>iOS8.0</code>之后每次debug运行或者更新，这个UUID都会改变，而我又为了方便，一开始就存储了全路径，所以每次重新运行代码就会出现找不到这个文件，因为UUID的改变导致了整个目录都变了，自然找不到。</p>
<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>既然知道了问题所在，解决问题就简单了</p>
<ol>
<li>遍历目录，通过fileName过滤拿到对应的文件<br>刚开始，由于对iOS这边的api之类的还不是很了解，解决思路也很直接，既然Swift上能拿到目录下所有文件的url了，在kotlin native层肯定有对应的API，于是开搞，上代码：<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拿到目录的url</span></span><br><span class="line"><span class="keyword">val</span> url = fileManager.URLForDirectory(</span><br><span class="line">    directory = NSDocumentDirectory,</span><br><span class="line">    inDomain = NSUserDomainMask,</span><br><span class="line">    appropriateForURL = <span class="literal">null</span>,</span><br><span class="line">    create = <span class="literal">false</span>,</span><br><span class="line">    error = <span class="literal">null</span></span><br><span class="line">)!!</span><br><span class="line"><span class="comment">// 拿到目录下所有文件的url</span></span><br><span class="line"><span class="keyword">val</span> fileUrls = fileManager.contentsOfDirectoryAtURL(url = url, includingPropertiesForKeys = <span class="literal">null</span>, options = <span class="number">0</span>, error = errorPtr.ptr)</span><br><span class="line"><span class="comment">// 通过全路径拿到文件名，然后通过文件名过滤得到唯一的文件url</span></span><br><span class="line"><span class="keyword">val</span> currentFileUrl = fileUrls?.first &#123; it.toString().contains(fileName) &#125; <span class="keyword">as</span>? NSURL</span><br><span class="line"><span class="comment">// 读取到NSData中</span></span><br><span class="line">currentFileUrl?.let &#123;</span><br><span class="line">    NSData.dataWithContentsOfURL(currentFileUrl)</span><br><span class="line">    ?.let &#123; bytes -&gt;</span><br><span class="line">        <span class="keyword">val</span> array = ByteArray(bytes.length.toInt())</span><br><span class="line">        bytes.getBytes(array.refTo(<span class="number">0</span>).getPointer(<span class="keyword">this</span>), bytes.length)</span><br><span class="line">        <span class="keyword">return</span><span class="symbol">@withContext</span> array</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
再次运行，成功拿到bytes（✌️）<br>但是这样存在一个问题，随着时间，这个目录的文件肯定会越来越多，到时候遍历肯定是一个耗时任务。那有没有可以直接通过filename拿到对应文件的url呢？<br>看了下代码，既然能拿到document目录的url，那是不是也有API可以直接拿到文件的url？一开始想通过url + filename组装一下<br>他们类型不一致，相对麻烦，还好找到了，代码：<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> documentDirectory = NSSearchPathForDirectoriesInDomains(</span><br><span class="line">    directory = NSDocumentDirectory,</span><br><span class="line">    domainMask = NSUserDomainMask,</span><br><span class="line">    expandTilde = <span class="literal">true</span></span><br><span class="line">).first() <span class="keyword">as</span> NSString</span><br><span class="line"><span class="keyword">val</span> fullPath = documentDirectory.stringByAppendingPathComponent(fileName)</span><br><span class="line">println(fullPath)</span><br></pre></td></tr></table></figure>
路径正确，直接调用<code>NSData.dataWithContentsOfFile</code>传入文件路径即可</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在 iOS8.0 之后，由于Application（Bundle identifier）的UUID会随机改变，所以不能直接存全路径，可以直接存名字<br>而可以通过<code>NSSearchPathForDirectoriesInDomains</code>拿到对应的路径，再加上文件名得到当前文件准确的全路径，这时候读取即可。</p>
]]></content>
      <categories>
        <category>Kotlin Multiplatform</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>SwiftUI</tag>
      </tags>
  </entry>
</search>
