<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android Kotlin Coroutines + Retrofit + MVVM 简单实现</title>
    <url>/2021/09/11/Android-Kotlin-Coroutines-Retrofit-MVVM-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>这是一篇随记，想尝试下写文章。</li>
<li>这里基本不会深入讨论各个知识点，如需了解更多可以参考 <a href="https://www.bennyhuo.com/">Benny’s Blog</a> 和 <a href="https://kotlinlang.org/docs/reference/coroutines/coroutines-guide.html">Kotlin官方文档</a><h2 id="为什么使用协程"><a href="#为什么使用协程" class="headerlink" title="为什么使用协程"></a>为什么使用协程</h2></li>
<li>协程比线程小<blockquote>
<p>我： 为什么已经有Rx了还要在这里用协程？<br><br>某同事： 因为协程比线程小，可以开很多个。<br><br>我：…… 为什么比线程小？</p>
</blockquote>
</li>
</ul>
<p>&emsp; 我维基了一下，确实有说比线程更小。<br><br>&emsp; 但是看了一些源码，也是线程池 + 线程实现的，这时就开始有了疑惑，为什么同样是线程，怎么就说是比线程小的东西呢？<br><br>&emsp; 直到看到了Benny大佬的文章 <a href="https://www.bennyhuo.com/2019/10/19/coroutine-why-so-called-lightweight-thread/">协程为什么被称为『轻量级线程』</a>解释，我清晰了。通过测验，确实启动成千上万个协程也不会出现OOM或者其他问题。</p>
<ul>
<li>当然最主要的还是代码上的体验<br>现在Kotlin越来越普遍，各种inline函数，操作符也都基本可以替换Rx的常用操作符了。所以在写代码上体验还是相对比较好的。<br><br><font color=#f00 size=3><em>（备注：个人觉得协程小不小对于Android开发真的没多大区别，最主要还是写代码和代码美观性）</em></font></li>
</ul>
<h2 id="一、添加依赖"><a href="#一、添加依赖" class="headerlink" title="一、添加依赖"></a>一、添加依赖</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation<span class="string">&quot;com.squareup.retrofit2:retrofit:2.6.2&quot;</span></span><br><span class="line">implementation<span class="string">&quot;com.squareup.retrofit2:converter-gson:2.6.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Coroutines </span></span><br><span class="line">implementation <span class="string">&#x27;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.2&#x27;</span></span><br></pre></td></tr></table></figure>
<p><font color=#f00 size=3><em>记得使用retrofit 2.6.0 或以上</em></font></p>
<h2 id="二、准备网络请求接口"><a href="#二、准备网络请求接口" class="headerlink" title="二、准备网络请求接口"></a>二、准备网络请求接口</h2><ul>
<li>创建接口<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GitApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GET(<span class="meta-string">&quot;/users/&#123;username&#125;/&#123;module&#125;&quot;</span>)</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">repos</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Path(<span class="meta-string">&quot;username&quot;</span>)</span> username: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Path(<span class="meta-string">&quot;module&quot;</span>)</span> module: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Query(<span class="meta-string">&quot;page&quot;</span>)</span> currPage: <span class="type">Int</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: List&lt;RepoInfo&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET(<span class="meta-string">&quot;/search/repositories&quot;</span>)</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">searchRepos</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Query(<span class="meta-string">&quot;q&quot;</span>)</span> key: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Query(<span class="meta-string">&quot;sort&quot;</span>)</span> sort: <span class="type">String</span>? = <span class="string">&quot;updated&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Query(<span class="meta-string">&quot;order&quot;</span>)</span> order: <span class="type">String</span>? = <span class="string">&quot;desc&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Query(<span class="meta-string">&quot;page&quot;</span>)</span> currPage: <span class="type">Int</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: SearchResponse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建Retrofit实例<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">buildRetrofit</span><span class="params">()</span></span>: Retrofit &#123;</span><br><span class="line">     builder.addInterceptor(HttpLoggingInterceptor(<span class="keyword">object</span> : HttpLoggingInterceptor.Logger &#123;</span><br><span class="line">         <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">log</span><span class="params">(message: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">             Timber.d(message)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;).apply &#123;</span><br><span class="line">         level = HttpLoggingInterceptor.Level.BODY</span><br><span class="line">     &#125;).addInterceptor(<span class="keyword">object</span> : Interceptor &#123;</span><br><span class="line">         <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">intercept</span><span class="params">(chain: <span class="type">Interceptor</span>.<span class="type">Chain</span>)</span></span>: Response &#123;</span><br><span class="line">             <span class="keyword">val</span> userCredentials = <span class="string">&quot;<span class="variable">$username</span>:<span class="variable">$password</span>&quot;</span></span><br><span class="line">             <span class="keyword">val</span> basicAuth =</span><br><span class="line">                 <span class="string">&quot;Basic <span class="subst">$&#123;String(Base64.encode(userCredentials.toByteArray(), Base64.DEFAULT))&#125;</span>&quot;</span></span><br><span class="line">             <span class="keyword">val</span> original = chain.request()</span><br><span class="line">             <span class="keyword">val</span> requestBuilder = original.newBuilder()</span><br><span class="line">                 .header(<span class="string">&quot;Authorization&quot;</span>, basicAuth.trim &#123; it &lt;= <span class="string">&#x27; &#x27;</span> &#125;)</span><br><span class="line">             <span class="keyword">val</span> request = requestBuilder.build()</span><br><span class="line">             <span class="keyword">return</span> chain.proceed(request)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="keyword">return</span> Retrofit.Builder()</span><br><span class="line">         .client(builder.build())</span><br><span class="line">         .baseUrl(BASE_URL)</span><br><span class="line">         .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">         .build()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、-在ViewModel中使用"><a href="#三、-在ViewModel中使用" class="headerlink" title="三、 在ViewModel中使用"></a>三、 在ViewModel中使用</h2><code>kotlinx.coroutines.CoroutineScope</code> 接口中的注释有这么一句话<br><br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/30/16f561eaea6d630b~tplv-t2oaga2asx-image.image" alt="image.png"><br>所以启动一个协程一定需要一个<code>Scope</code>，也就是说每个suspend函数都有一个<code>CoroutineScope</code>，如果没有一定会报错。而Android的ViewModel中有扩展了一个<code>viewModelScope</code>，并且跟<code>lifecycle</code>绑定了，所以在ViewModel的onCleared方法上会自动帮我们cancel掉这个viewModelScope的所有Jobs。<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/30/16f561eae8114f24~tplv-t2oaga2asx-image.image" alt="图1"><br>为了方便使用，封装了一个BaseViewModel<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseViewModel</span> : <span class="type">ViewModel</span></span>() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">request</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        onError: (<span class="type">error</span>: <span class="type">Throwable</span>) -&gt; <span class="type">Unit</span> = &#123;&#125;, <span class="comment">// 不需要处理Error可以不传</span></span></span></span><br><span class="line"><span class="params"><span class="function">        execute: <span class="type">suspend</span> <span class="type">CoroutineScope</span>.() -&gt; <span class="type">T</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span> &#123;</span><br><span class="line">        viewModelScope.launch(errorHandler &#123; onError.invoke(it) &#125;) &#123;</span><br><span class="line">            launch(Dispatchers.IO) &#123;</span><br><span class="line">                execute()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">errorHandler</span><span class="params">(onError: (<span class="type">error</span>: <span class="type">Throwable</span>) -&gt; <span class="type">Unit</span>)</span></span>: CoroutineExceptionHandler &#123;</span><br><span class="line">        <span class="keyword">return</span> CoroutineExceptionHandler &#123; _, throwable -&gt;</span><br><span class="line">            Timber.d(throwable)</span><br><span class="line">            onError.invoke(throwable)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
使用继承 <code>BaseViewModel</code> 调用 <code>request</code> 方法即可。<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RepoViewModel</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> userRepo: UserDataSource,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> gitApi: GitApi</span><br><span class="line">) : BaseViewModel() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> _reposResult = BaseLiveData&lt;List&lt;RepoInfo&gt;&gt;()</span><br><span class="line">    <span class="keyword">val</span> repoResult: BaseLiveData&lt;List&lt;RepoInfo&gt;&gt;</span><br><span class="line">        <span class="keyword">get</span>() = _reposResult</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">fetchRepos</span><span class="params">(module: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        request &#123;</span><br><span class="line">            userRepo.currUser()?.let &#123;</span><br><span class="line">                <span class="keyword">val</span> result = gitApi.repos(it.nickname, module, <span class="number">1</span>)</span><br><span class="line">                _reposResult.update(result)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
OR<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fetchRepos</span><span class="params">(module: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        request(</span><br><span class="line">            onError = &#123;</span><br><span class="line">                <span class="comment">// handle error</span></span><br><span class="line">            &#125;,</span><br><span class="line">            execute = &#123;</span><br><span class="line">                userRepo.currUser()?.let &#123;</span><br><span class="line">                    <span class="keyword">val</span> result = gitApi.repos(it.nickname, module, <span class="number">1</span>)</span><br><span class="line">                    _reposResult.update(result)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
剩下的基本是LiveData和Fragment之间的订阅上的逻辑实现了。<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2>最近在学习，了解也不是很深，欢迎评论补充和提建议。 学习项目地址 <a href="https://github.com/BreakZero/Dithub">Dithub</a>。</li>
</ul>
]]></content>
      <tags>
        <tag>Android</tag>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyWallet Gradle Clean Up</title>
    <url>/2021/09/11/EasyWallet-Part-1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>记录并整理EasyWallet 小钱包开发过程</li>
<li>在项目中使用到：</li>
</ul>
<ol>
<li>Composing build + plugin 实现依赖库统一管理</li>
<li>Jetpack Compose</li>
<li>Hilt 依赖注入</li>
<li>Kotlin/Kotlin flow/Coroutine</li>
<li>Ktor 实现网络请求</li>
<li>Room 实现本地存储</li>
</ol>
<ul>
<li>本项目地址：<a href="https://github.com/BreakZero/EasyWallet-Mobile-Compose">EasyWallet-Compose</a></li>
</ul>
<h2 id="gradle-脚本管理"><a href="#gradle-脚本管理" class="headerlink" title="gradle 脚本管理"></a>gradle 脚本管理</h2><ul>
<li>创建新的模块作为Composing build，并在 <code>build.gradle.kts</code> 中加入如下代码实现plugin配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gradlePlugin &#123;</span><br><span class="line">    plugins &#123;</span><br><span class="line">        create(&quot;VersionPlugin&quot;) &#123;</span><br><span class="line">            id = &quot;version-plugin&quot; // change the name you like</span><br><span class="line">            implementationClass = &quot;com.easy.version.DependencyVersionPlugin&quot; // change package to what you done</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在 <code>src.main.kotlin</code> 目录下Plugin实现类实现接口 <code>Plugin&lt;Project&gt;</code>，这个plugin 的apply 方法会在任何你使用这个plugin的module 执行</li>
<li>统一管理Configs。 （这里我为了区分feature模块和app模块，所以加了ignore list）<ol>
<li>首先我们在每个模块都需要的plugin，写一个Project的扩展函数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private fun Project.applyPlugin() &#123;</span><br><span class="line">    apply(plugin = &quot;com.android.library&quot;)</span><br><span class="line">    apply(plugin = &quot;kotlin-android&quot;)</span><br><span class="line">    apply(plugin = &quot;kotlin-kapt&quot;)</span><br><span class="line">    apply(plugin = &quot;kotlin-parcelize&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
然后在apply方法中使用<br><code>target.beforeEvaluate &#123; applyPlugin() &#125;</code><br>这里注意要加上beforeEvaluate，在执行前apply plugin</li>
<li>配置 android 块<br>增加扩展方法 <code>LibraryExtension.moduleConfig(isCore: Boolean)</code> (isCore这里算是我项目的特殊支持，为了实现buildConfigField的)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Suppress(&quot;UnstableApiUsage&quot;)</span><br><span class="line">private fun LibraryExtension.moduleConfig(isCore: Boolean) &#123;</span><br><span class="line">    compileSdk = BuildConfig.compileSdkVersion</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdk = BuildConfig.minSdkVersion</span><br><span class="line">        targetSdk = BuildConfig.targetSdkVersion</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility = JavaVersion.VERSION_11</span><br><span class="line">        targetCompatibility = JavaVersion.VERSION_11</span><br><span class="line">    &#125;</span><br><span class="line">    buildFeatures.also &#123;</span><br><span class="line">        it.compose = true</span><br><span class="line">    &#125;</span><br><span class="line">    composeOptions &#123;</span><br><span class="line">        kotlinCompilerExtensionVersion = Compose.version</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>最后在root project中增加  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">subprojects &#123;</span><br><span class="line">    apply(plugin = &quot;version-plugin&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  给每个模块都应用上plugin，当然也可以单独在module上直接应用</li>
<li>以上配置完成后，你会看到模块的 gradle 脚本基本就很少了， 如下  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.easy.version.*</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation(project(&quot;:core&quot;))</span><br><span class="line">    implementation(project(&quot;:core-ui&quot;))</span><br><span class="line"></span><br><span class="line">    implementation(com.easy.version.dependencies.Other.sqlcipher)</span><br><span class="line"></span><br><span class="line">    roomDependencies()</span><br><span class="line">    composeUI()</span><br><span class="line">    hiltDependencies()</span><br><span class="line">    unitTestDependencies()</span><br><span class="line">    androidTestDependencies()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>如此配置之后， 每新增一个子模块，都能统一快速的配置gradle</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>模块分离、Navigation管理…</p>
]]></content>
  </entry>
  <entry>
    <title>RPC with Kotlinx Serialization</title>
    <url>/2022/06/08/RPC-with-Kotlinx-Serialization/</url>
    <content><![CDATA[<blockquote>
<p>因为将项目从Retrofit切换到Ktor和gson切换到kotlinx serialize。而kotlinx serialize和gson的实现差异导致在rpc接口中对于rpc 请求参数类型不一致的情况下，序列化出现了异常报错，比如类似一下的请求Body</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_call&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;data&quot;</span>: <span class="string">&quot;0x5ec88c7900000000000000000000000081080a7e991bcdddba8c2302a70f45d6bd369ab5&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;0x81080a7e991bcDdDBA8C2302A70f45d6Bd369Ab5&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;0xb3831584acb95ED9cCb0C11f677B5AD01DeaeEc0&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;latest&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="List-lt-Any-gt-Contextual"><a href="#List-lt-Any-gt-Contextual" class="headerlink" title="List&lt;Any&gt; + @Contextual"></a><code>List&lt;Any&gt;</code> + @Contextual</h3><p>本来以为在Kotlinx Serialize上会像Gson一样轻松解决，一开始便对于原来的数据结构定义成</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Serializable</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBaseRpc</span></span>(</span><br><span class="line">    <span class="keyword">val</span> jsonrpc: String,</span><br><span class="line">    <span class="keyword">val</span> method: String,</span><br><span class="line">    <span class="keyword">val</span> params: List&lt;<span class="meta">@Contextual</span> Any&gt;,</span><br><span class="line">    <span class="keyword">val</span> id: <span class="built_in">Int</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>并在Json 配置的时候将 Contextual配置上</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Json &#123;</span><br><span class="line">    useArrayPolymorphism = <span class="literal">true</span></span><br><span class="line">    prettyPrint = <span class="literal">true</span></span><br><span class="line">    allowStructuredMapKeys = <span class="literal">true</span></span><br><span class="line">    serializersModule = SerializersModule &#123;</span><br><span class="line">        contextual(Any::<span class="class"><span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            TestCaller.serializer()</span><br><span class="line">            String.serializer()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将单元测试代码跑起来后发现，contextual 只使用了最后一个serializer来解析Any类型，所以这个方向无法实现想要的结果<br>报错如下：<p style="color:red">***.TestCaller cannot be cast to class java.lang.String</p></p>
<blockquote>
<p>Note: 如果将两个serializer调换顺序就会发现报错也会两个类型互换</p>
</blockquote>
<h3 id="通过-Interface-Polymorphic"><a href="#通过-Interface-Polymorphic" class="headerlink" title="通过 Interface + Polymorphic"></a>通过 Interface + Polymorphic</h3><p>polymorphic多态的意思，顾名思义，可以根据实际情况进行选择对应的Serializer，所以需要有一个基类(可以interface，sealed…)</p>
<ol>
<li>首先定义一个interface<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">interface</span> <span class="title">Parameter</span></span></span><br></pre></td></tr></table></figure></li>
<li>定义subclass<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Serializable</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">CallParameter</span></span>(</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span>: String,</span><br><span class="line">    <span class="keyword">val</span> from: String,</span><br><span class="line">    <span class="keyword">val</span> to: String</span><br><span class="line">) : Parameter</span><br><span class="line"></span><br><span class="line"><span class="meta">@Serializable</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">IntListParameter</span></span>(</span><br><span class="line">    <span class="keyword">val</span> items: List&lt;<span class="built_in">Int</span>&gt;</span><br><span class="line">) : Parameter</span><br><span class="line"></span><br><span class="line"><span class="meta">@Serializable</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">StringParameter</span></span>(</span><br><span class="line">    <span class="keyword">val</span> content: String</span><br><span class="line">) : Parameter</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li>配置Json模块<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Json &#123;</span><br><span class="line">    useArrayPolymorphism = <span class="literal">true</span></span><br><span class="line">    prettyPrint = <span class="literal">true</span></span><br><span class="line">    ignoreUnknownKeys = <span class="literal">true</span></span><br><span class="line">    allowStructuredMapKeys = <span class="literal">true</span></span><br><span class="line">    serializersModule = SerializersModule &#123;</span><br><span class="line">        polymorphic(List::<span class="class"><span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            ListSerializer(ParameterSerialize)</span><br><span class="line">        &#125;</span><br><span class="line">        polymorphic(Parameter::<span class="class"><span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            subclass(CallParameter::<span class="class"><span class="keyword">class</span>, <span class="type">CallParameter.serializer</span></span>())</span><br><span class="line">            subclass(StringParameter::<span class="class"><span class="keyword">class</span>, <span class="type">StringParameterSerializer)</span></span></span><br><span class="line">            subclass(IntListParameter::<span class="class"><span class="keyword">class</span>, <span class="type">IntListParameterSerializer)</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>针对不同结构定义不同的Serializer<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> IntListParameterSerializer : KSerializer&lt;IntListParameter&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">deserialize</span><span class="params">(decoder: <span class="type">Decoder</span>)</span></span>: IntListParameter &#123;</span><br><span class="line">        <span class="keyword">return</span> decoder.decodeStructure(descriptor) &#123;</span><br><span class="line">            <span class="keyword">val</span> items = decodeSerializableElement(descriptor, <span class="number">0</span>, ListSerializer(<span class="built_in">Int</span>.serializer()))</span><br><span class="line">            IntListParameter(</span><br><span class="line">                items = items</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> descriptor: SerialDescriptor</span><br><span class="line">        <span class="keyword">get</span>() = buildClassSerialDescriptor(<span class="string">&quot;IntListParameter&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.element&lt;List&lt;<span class="built_in">Int</span>&gt;&gt;(<span class="string">&quot;items&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">serialize</span><span class="params">(encoder: <span class="type">Encoder</span>, value: <span class="type">IntListParameter</span>)</span></span> &#123;</span><br><span class="line">        encoder.encodeSerializableValue(ListSerializer(<span class="built_in">Int</span>.serializer()), value.items)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OptIn(ExperimentalSerializationApi::class)</span></span><br><span class="line"><span class="meta">@Serializer(forClass = BaseRpcRequest::class)</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> RpcRequestBodySerializer : KSerializer&lt;BaseRpcRequest&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">deserialize</span><span class="params">(decoder: <span class="type">Decoder</span>)</span></span>: BaseRpcRequest &#123;</span><br><span class="line">        <span class="keyword">return</span> decoder.decodeStructure(descriptor) &#123;</span><br><span class="line">            <span class="keyword">var</span> rpc: String? = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">var</span> method: String? = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">var</span> params: List&lt;Parameter&gt; = emptyList()</span><br><span class="line">            <span class="keyword">var</span> id: <span class="built_in">Int</span>? = <span class="literal">null</span></span><br><span class="line">            <span class="symbol">loop@</span> <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">when</span> (decodeElementIndex(descriptor)) &#123;</span><br><span class="line">                    CompositeDecoder.DECODE_DONE -&gt; <span class="keyword">break</span><span class="symbol">@loop</span></span><br><span class="line"></span><br><span class="line">                    <span class="number">0</span> -&gt; rpc = decodeStringElement(descriptor, <span class="number">0</span>)</span><br><span class="line">                    <span class="number">1</span> -&gt; method = decodeStringElement(descriptor, <span class="number">1</span>)</span><br><span class="line">                    <span class="number">2</span> -&gt; params = decodeSerializableElement(descriptor, <span class="number">2</span>, ListSerializer(ParameterSerialize))</span><br><span class="line">                    <span class="number">3</span> -&gt; id = decodeIntElement(descriptor, <span class="number">3</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            BaseRpcRequest(</span><br><span class="line">                jsonrpc = rpc.orEmpty(),</span><br><span class="line">                method = method.orEmpty(),</span><br><span class="line">                params = params,</span><br><span class="line">                id = id ?: <span class="number">1</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> descriptor: SerialDescriptor</span><br><span class="line">        <span class="keyword">get</span>() = buildClassSerialDescriptor(<span class="string">&quot;BaseRpcRequest&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.element&lt;String&gt;(<span class="string">&quot;jsonrpc&quot;</span>)</span><br><span class="line">            <span class="keyword">this</span>.element&lt;String&gt;(<span class="string">&quot;method&quot;</span>)</span><br><span class="line">            <span class="keyword">this</span>.element&lt;List&lt;Parameter&gt;&gt;(<span class="string">&quot;params&quot;</span>)</span><br><span class="line">            <span class="keyword">this</span>.element&lt;<span class="built_in">Int</span>&gt;(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">serialize</span><span class="params">(encoder: <span class="type">Encoder</span>, value: <span class="type">BaseRpcRequest</span>)</span></span> &#123;</span><br><span class="line">        encoder.encodeStructure(descriptor) &#123;</span><br><span class="line">            encodeStringElement(descriptor, <span class="number">0</span>, value.jsonrpc)</span><br><span class="line">            encodeStringElement(descriptor, <span class="number">1</span>, value.method)</span><br><span class="line">            encodeSerializableElement(descriptor, <span class="number">2</span>, ListSerializer(ParameterSerialize), value.params)</span><br><span class="line">            encodeIntElement(descriptor, <span class="number">3</span>, value.id)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li>如果需要deserialize，便需要加上如下选择器<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">object</span> ParameterSerialize : JsonContentPolymorphicSerializer&lt;Parameter&gt;(Parameter::<span class="class"><span class="keyword">class</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">selectDeserializer</span><span class="params">(element: <span class="type">JsonElement</span>)</span></span>: DeserializationStrategy&lt;<span class="keyword">out</span> Parameter&gt; &#123;</span><br><span class="line">        println(<span class="string">&quot;element: <span class="variable">$element</span>, obj: <span class="subst">$&#123;element.jsonObject&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// override the condition for your point</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">when</span> &#123;</span><br><span class="line">            <span class="string">&quot;content&quot;</span> <span class="keyword">in</span> element.jsonObject -&gt; StringParameterSerializer</span><br><span class="line">            <span class="string">&quot;items&quot;</span> <span class="keyword">in</span> element.jsonObject -&gt; IntListParameterSerializer</span><br><span class="line">            <span class="keyword">else</span> -&gt; CallParameter.serializer()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
运行单元测试，验证通过：<br><img src="../images/pic1.png" alt="Unit Test Result!" title="Unit Test Result"></li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>只是为了在项目中减少gson的使用，所以花了点时间验证下具体情况，但是：<br>虽然目前看起来是解决了问题，不过相对来说比较麻烦，并且如果类型越来越多也会增加不必要的工作量，所以这里更建议直接使用gson</p>
]]></content>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
